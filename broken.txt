<div class="extension">

## Figure Titles

A resource which is inserted as a figure can have a figure title.

This title shows up in two places in the output:

1. Near the resource, typically above or below it, per the preference of the
Markua Processor.
2. Based on the resource type, either in the List of Illustrations, List of
Tables or Table of Figures, if they are generated for the book. This text
should also be a crosslink to the title inserted near the figure itself.

The title for a figure can provided in one of two ways:

1. In quotes after the filename or URL of a local or web resource.
   ~~~
   ![](algorithm.rb "My Amazing Algorithm")
   ~~~
2. In the attribute list above the resource.
   ~~~
   {title: "My Amazing Algorithm"}
   ![](algorithm.rb)
   ~~~

The first choice is clearly shorter, as well as more pleasant to write and to
read.

Since inline resources do not use the bracket syntax, any titles must be added
in the attribute list:

~~~
{title: "My Amazing Algorithm"}
```ruby
puts "hello world"
```
~~~

##### Figure alt text

A figure can have alt text, as long as the type of resource being inserted
supports alt text. The resource location does not matter: local, web and inline
resources all support alt text.

Alt text is text which is intended to take the place of the resource if the
resource itself cannot be seen. In the case of images, the obvious use case is
for readers with visual disabilities who are using a screen reader, but it also
includes audiobooks and ebook readers which often do not support embedded
images, audio and video, and which may have a hard time displaying math.

Here's an example of good alt text:

~~~
![a red apple, possibly a McIntosh or Spartan](fruit.jpg)
~~~

You can also use an attribute list:

~~~
{alt: "a red apple, possibly a McIntosh or Spartan"}
![](fruit.jpg)
~~~

The alt text should **not** have the same content as the figure title, if the
figure title is present. (Imagine the annoyance for someone with a visual
disability having their screen reader read identical alt text and figure titles
to them throughout an entire book!)

Instead, the alt text should be descriptive of the image content, while the figure
title can be more creative. For example, a figure title may be "Washington
Crossing the Delaware" and the alt text could be "Denzel Washington on a boat in
a river." Having good alt text would enable readers who cannot see the image to
still get the joke which the figure title makes.

##### Figure titles and alt text together

These are some examples of figures with both alt text and a figure title:

~~~
![a red apple](mac.jpg "The Original Mac")

{alt: "a red apple", title: "The Original Mac"}
![](mac.jpg)

{alt: "a blue circle", title: "Earth From Space (Simplified)"}
```!
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```
~~~

##### The figure attribute list takes precedence

It is always an error to specify an attribute both in the attribute list for a
figure and in the syntactic sugar locations, either after the backticks or in the
square brackets.

However, if this is done, then the value in the attribute list takes precedence.

In the following figure, the format is `text` not `ruby`:

~~~
{format: text}
```ruby
puts "hello world"
```
~~~

In the following figure, the alt text would be "foo" not "bar":

~~~
{alt: foo}
![bar](foo.png)
~~~

In the following figure, the title text would be "foo" not "bar":

~~~
{title: foo}
![](foo.png "bar")
~~~

Again, the Markua Processor should treat all of these as an error.

#### Spans

Inserting a resource as a span means to continue the block context which it is
in, instead of starting a new leaf block for the resource.

There are three types of resources which can be inserted as spans:

1. Single-line inline code resources.
2. A `math` resource (regardless of location) without a title.
3. A local or web `image` resource without a title.

An inline code resource can be inserted as a span using the following syntax:

~~~
backtick `resource`format backtick
~~~

The math formats, including the syntactic sugar for them, are discussed later.

A local image resource without a title can be inserted as expected:

~~~
This is an ![a red apple](mac.jpg) not a banana.
~~~

A web image resource without a title can be inserted as expected:

~~~
This is an ![a red apple](http://markua.com/mac.jpg) not a banana.
~~~

Note that inline image resources cannot be inserted as spans, since even SVG is
so verbose it would make the resulting document very hard to read.

Also, note that if you wish to insert an image in the middle of a sentence,
chances are you are trying to insert an emoji. You can do this with a span image,
if you want exact control of what your emoji look like. However, note that emoji
also have special support in Markua, described [here](#emoji).

Finally, if a title is present, the Markua Processor must treat the resource
as having implicit newlines before and after it, so that it is handled as a
figure. (Figure titles do not make sense inside of sentences.)

~~~
This is ![a red apple](mac.jpg "The Original Mac") not a banana.
~~~

##### Span attribute lists can be used to set the format

When a resource is inserted as a span, the resource is inserted as part of the
flow of text of a paragraph with no newlines before or after it. A span resource
is intended to be extremely short and simple.

By default, the type of an inline resource is `code` and the format is `guess`.
Math and SVG images override this using special syntaxes, discussed later.

However, to support rare use cases, any span can have an attribute list. The
attribute list on a span is specified immediately after the closing backtick.
Span attribute lists can be used to set the format explicitly.

For example, this resource would be formatted as Ruby code:
~~~
Yada yada `puts "hi"`{format: ruby} yada yada.
~~~



</div>


