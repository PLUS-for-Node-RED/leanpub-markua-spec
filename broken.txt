<div class="extension">

# Resources (M)

Markua documents are written in plain text, either in one text file or multiple
text files. However, modern books and courses sometimes contain more than text.
Books and courses may embed many kinds of [resources](@).

Resources vary in four different ways:

1. Type
2. Format
3. Class
4. Location

While resources are a very important addition that Markua makes to Markdown,
they are exactly that: an addition. Resources provide an important conceptual
framework, while remaining purely additive to standard Markdown. Specifically,
all images, fenced code blocks and tables supported by CommonMark or GFM work in
Markua unchanged.

What resources do is provide consistency, both in the conceptual understanding,
in adding support for attribute lists, and specifying standard `type`, `format`
and `class` attributes for all resources, including the resources such as
images, fenced code blocks and tables which are also found in other Markdown
dialects.

We have already discussed attribute lists earlier for things like part headings
and conditional inclusion attributes, but by far the most important use of
attribute lists in Markua is with resources. For resources, attribute lists can
be used to specify a figure title and alt text, set an id, specify the format,
and do other useful things.

While resources are an important addition that Markua makes to Markdown, they
were not created in a vacuum. As you'll see, the syntax for local and web
resources is similar to Markdown's inline image insertion syntax, and the syntax
for inline resources is just the fenced code blocks syntax from CommonMark with
the addition of format specifiers and attribute lists. Furthermore, the standard
Markdown image syntax is the inspiration for the syntax of all local and web
resources.

Before we consider how resources vary by type, format, class and location, we
will consider what they have in common. Specifically, resources share the
following things:

1. Attributes and attribute list support
2. Behaviour as a figure or a span based on the presence of title
3. Support for a title to be provided from alt text based on the `alt-title`
   document setting.



## Resource attributes (M)

Resources have attributes. Attributes can be specified in two ways:

1. In attribute lists.
2. In the syntax for the resource insertion.

As you will see soon, resources can be local, web or inline.

The syntax for a local or web resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
![optional alt text](resource_path_or_url "Optional Figure Title")
~~~

The syntax for an inline resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
```optional_format
inline resource content (default format is `guess` with backticks)
```
~~~

You can also insert an inline resource using three or more tildes (`~`) as the
delimiter, instead of the more typical backticks (`):

```
{key: value, comma: separated, optional: attribute_list}
~~~optional_format
inline resource content (default format is `text` with tildes)
~~~
```

To be clear, the number of backticks or tildes can be three or more. This is
just the fenced code blocks syntax, which is discussed later.

Finally, a local or web resource can also have attributes specified after the
resource itself. This is a lot less common, and is discouraged, but it is
documented for completeness:

~~~
![optional alt text](resource_path_or_url "Optional Figure Title"){key: value, comma: separated, optional: attribute_list}
~~~

This is gross, but the reason it is supported is since resources can be inserted
in a sentence, and attribute lists (e.g. for index entries) can be added this
way.

### Common Resource Attributes

The supported attributes vary based on the type of resource, but **all**
resources support the `class`, `format`, `title` and `type` attributes.

As such, these four attributes are discussed here, instead of on the specific 
resource types later.

`class`
: All attribute lists, including those for resources, support a `class`
attribute. When used on resources, this is the class of the resources. This can
be used for styling, and it can also be used by Markua Processors which group
figures by classes. Resources with titles are treated as figures; this is
discussed extensively in the next section.

`format`
: This is the resource format. Different resource types have different legal
values for format.

`title`
: This is text which is shown near the figure, typically above or below it. A
Markua Processor can choose where to position titles based on any criteria it
chooses. For example, a Markua Processor can position all titles above or
below figures, or use a different behaviour based on the resource format (e.g.
table titles above, image titles below). Note that the figure title itself
may contain the Markua text formatting specified earlier (e.g. bold, italic).
This text is also displayed for the figure wherever the figure is listed
(e.g. List of Illustrations, Table of Tables, etc.).

`type`
: This is the resource type. This is usually inferred from the format instead of
being specified.


## Resource types (M)

There are eight types of resources:

1. `audio`
2. `code`
3. `iframe`
4. `image`
5. `math`
6. `table`
7. `verbatim`
8. `video`

Each type of resource has a number of supported formats. Any of the resource
types can be inserted as a local resource or web resource, and many of the
resource types can also be inserted as an inline resource.

The `code`, `image` and `table` resource types are an extension and a
generalization of what is already supported in Markdown; the `audio`, `iframe`,
`math`, `verbatim` and `video` resource types are new.

Either way, each type of resource has a number of supported formats. Any of
the resource types can be inserted as a local resource or web resource,
and many of the resource types can also be inserted as an inline resource.

To be clear: resources are *not* parsed as plain [textual
content](#textual-content); instead, they are parsed according to the rules that
govern the parsing of resources.



## Resource formats (M)

The **Format** is the format of the resource. It can be specified with the
`type` attribute, or inferred from the file extension (discussed below).
This is important information to help the Markua Processor handle the
resource correctly.

Both the type and the format can be specified in an attribute list, by the
respective `type` and `format` attributes.

The type and the format can also be inferred from the file extension and, in the
case of web resources, the URL.

Markua Processors must interpret all unspecified file extensions as specifying a
resource of type `code` with a format of `guess`, unless the resource is a web
resource.

If the type and format are not specified and the resource is a web resource, the
Markua Processor may use the domain to decide what type of resource to assume.
For example, a domain of `youtube.com` may be assumed to be of type `video`, a
domain of `instagram.com` may be assumed to be of type `image`, and a domain of
`github.com` may be assumed to be of type `code`.

If the type is not specified in the attribute list, the format determines the
type. The formats can either be specified by the `format` attribute or (in most
cases) inferred from the file extension for local and web resources. (Inline
resources obviously have no file extension, since they are contained in the body
of a Markua document.)

As an author, all you typically do is provide the correct file extension for a
local resource or set the format in the attribute list. Markua recognizes the
format, and uses it to determine the type. If the format is unrecognized, then
the resource is treated as a resource of type `code` and with a format of
`guess`.

It's important to emphasize that the type and format of a resource can be
overridden using an attribute list. The file extensions just set the default
type and format that are inferred.

In rare instances, it is useful to override the `type` and `format` which have
been inferred by the Markua Processor based on the file extension of the
resource. This is done by specifying a type and/or format in the attribute list
of the resource.



## Resource classes (M)

As shown above, when a resource is inserted with a title, it is treated as a
figure. Figures can show up in one of the lists of figures which can be
generated near the start of the book or course.

This can be further customized by the `class` attribute.

There is a document setting called `list-figures-by-class` which determines
whether the class is used to group figures appropriately. The default value of
`list-figures-by-class` is true. If `list-figures-by-class` is true, then the
Markua Processor should group figures by their class (with appropriate
modifications to the class name for localization or for multiple words) when
building the list(s) of figures near the beginning of the book. This can be used
to automatically produce a List of Lemmas, List of Theorems, List of Poems,
List of Code Samples, etc.

If `list-figures-by-class` is false, then all figures (that is, all resources
with titles) will be listed in a List of Figures.


) This enables an author
to have, say, a List of Theorems, List of Code Samples, List of Poems, or a
List of Sonnets, produced entirely dynamically based on the values of the
`class` attribute, instead of just a `List of Figures`. See the Document
Settings section for more information.



To be clear: other than the `none` value, there is nothing magical about the
values of the `class` attribute. An author can set it to whatever they want.


list-figures-by-class : true or false. The default value is true. 

If no `class` attribute is provided and a list of figures is being generated,
then 



determines


The **Class** determines whether, and how, the resource is presented in a
particular list of resources near the beginning of the book. The `span`
class is special, in that it never shows up in a list of resources. All other
classes of resource may show up in a list of resources, grouped by their
class. The class is completely orthogonal to the type or format of a
resource. For example, all resources in a book could just be categorized as
in the `span` or `figure` class. This would result in a List of Figures
near the beginning of the book, which listed all resources of class figure,
regardless of their `type` (e.g. `image`, `code`, `table`, etc.) or their
`format` (e.g. `jpg`, `ruby`, `csv`, etc.)

Regardless of
their type or format, resources can be listed in different lists of
classes of resources near the beginning of a book. For example, a book may
choose to only categorize resources as spans or figures. 
lists of
r the category of the resource as far as the Markua Processor
is concerned. The class can be used to differentiate identical types of
Markua resources in various lists, such as a List of Lemmas, List of Poems,
or List of Theorems. When a resource is inserted without an attribute list,
either in a span (such as an emoji in a sentence) or in a block (such as an
image, list or table with no caption), the the `class` is implicitly set to
`span`. Resources with a class of `span` do not show up in any list of
figures. The `class` attribute is discussed further below.


Resources can be inserted either as figures or as spans.

## TODO rewrite this



The default value of the `class` attribute is `none` when the resource is
inserted as a span. When a resource is inserted as a figure, the default value
of the `class` attribute is determined by the `type` of resource:

* A resource with type `audio` defaults to a class of `recording`.
* A resource with type `code` defaults to a class of `listing`.
* A resource with type `image` defaults to a class of `figure`.
* A resource with type `markua` defaults to a class of `none`. Other values
  of the `class` for `markua` resource types include `poem` and `list`.
  The `none` class is special: it means that the resource is not inserted in any
  special way, but is just inserted as though the author typed it in the
  manuscript. This enables this class of `markua` resource to be used for text
  substitution.
* A resource with type `math` defaults to a class of `equation`.
* A resource with type `video` defaults to a class of `footage`.

To be clear: other than the `none` value, there is nothing magical about the
values of the `class` attribute. An author can set it to whatever they want.
There is a document setting called `list-figures-by-class` which determines
whether the class is used to group figures appropriately. This enables an author
to have, say, a List of Theorems, List of Code Samples, List of Poems, or a
List of Sonnets, produced entirely dynamically based on the values of the
`class` attribute, instead of just a `List of Figures`. See the Document
Settings section for more information.

Figures can have both alt text and a figure title. These are distinct things.
We will discuss the figure title first and the alt text second.


TODO

Figure Titles

A resource which is inserted as a figure can have a figure title.

This title shows up in two places in the output:

1. Near the resource, typically above or below it, per the preference of the
Markua Processor.
2. Based on the resource type, either in the List of Illustrations, List of
Tables or Table of Figures, if they are generated for the book. This text
should also be a crosslink to the title inserted near the figure itself.

The title for a figure can provided in one of two ways:

1. In quotes after the filename or URL of a local or web resource.
   ~~~
   ![](algorithm.rb "My Amazing Algorithm")
   ~~~
2. In the attribute list above the resource.
   ~~~
   {title: "My Amazing Algorithm"}
   ![](algorithm.rb)
   ~~~

The first choice is clearly shorter, as well as more pleasant to write and to
read.

Since inline resources do not use the bracket syntax, any titles must be added
in the attribute list:

~~~
{title: "My Amazing Algorithm"}
```ruby
puts "hello world"
```
~~~

##### Figure alt text

A figure can have alt text, as long as the type of resource being inserted
supports alt text. The resource location does not matter: local, web and inline
resources all support alt text.

Alt text is text which is intended to take the place of the resource if the
resource itself cannot be seen. In the case of images, the obvious use case is
for readers with visual disabilities who are using a screen reader, but it also
includes audiobooks and ebook readers which often do not support embedded
images, audio and video, and which may have a hard time displaying math.

Here's an example of good alt text:

~~~
![a red apple, possibly a McIntosh or Spartan](fruit.jpg)
~~~

You can also use an attribute list:

~~~
{alt: "a red apple, possibly a McIntosh or Spartan"}
![](fruit.jpg)
~~~

The alt text should **not** have the same content as the figure title, if the
figure title is present. (Imagine the annoyance for someone with a visual
disability having their screen reader read identical alt text and figure titles
to them throughout an entire book!)

Instead, the alt text should be descriptive of the image content, while the figure
title can be more creative. For example, a figure title may be "Washington
Crossing the Delaware" and the alt text could be "Denzel Washington on a boat in
a river." Having good alt text would enable readers who cannot see the image to
still get the joke which the figure title makes.

##### Figure titles and alt text together

These are some examples of figures with both alt text and a figure title:

~~~
![a red apple](mac.jpg "The Original Mac")

{alt: "a red apple", title: "The Original Mac"}
![](mac.jpg)

{alt: "a blue circle", title: "Earth From Space (Simplified)"}
```!
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```
~~~

##### The figure attribute list takes precedence

It is always an error to specify an attribute both in the attribute list for a
figure and in the syntactic sugar locations, either after the backticks or in the
square brackets.

However, if this is done, then the value in the attribute list takes precedence.

In the following figure, the format is `text` not `ruby`:

~~~
{format: text}
```ruby
puts "hello world"
```
~~~

In the following figure, the alt text would be "foo" not "bar":

~~~
{alt: foo}
![bar](foo.png)
~~~

In the following figure, the title text would be "foo" not "bar":

~~~
{title: foo}
![](foo.png "bar")
~~~

Again, the Markua Processor should treat all of these as an error.

#### Spans

Inserting a resource as a span means to continue the block context which it is
in, instead of starting a new leaf block for the resource.

There are three types of resources which can be inserted as spans:

1. Single-line inline code resources.
2. A `math` resource (regardless of location) without a title.
3. A local or web `image` resource without a title.

An inline code resource can be inserted as a span using the following syntax:

~~~
backtick `resource`format backtick
~~~

The math formats, including the syntactic sugar for them, are discussed later.

A local image resource without a title can be inserted as expected:

~~~
This is an ![a red apple](mac.jpg) not a banana.
~~~

A web image resource without a title can be inserted as expected:

~~~
This is an ![a red apple](http://markua.com/mac.jpg) not a banana.
~~~

Note that inline image resources cannot be inserted as spans, since even SVG is
so verbose it would make the resulting document very hard to read.

Also, note that if you wish to insert an image in the middle of a sentence,
chances are you are trying to insert an emoji. You can do this with a span image,
if you want exact control of what your emoji look like. However, note that emoji
also have special support in Markua, described [here](#emoji).

Finally, if a title is present, the Markua Processor must treat the resource
as having implicit newlines before and after it, so that it is handled as a
figure. (Figure titles do not make sense inside of sentences.)

~~~
This is ![a red apple](mac.jpg "The Original Mac") not a banana.
~~~

##### Span attribute lists can be used to set the format

When a resource is inserted as a span, the resource is inserted as part of the
flow of text of a paragraph with no newlines before or after it. A span resource
is intended to be extremely short and simple.

By default, the type of an inline resource is `code` and the format is `guess`.
Math and SVG images override this using special syntaxes, discussed later.

However, to support rare use cases, any span can have an attribute list. The
attribute list on a span is specified immediately after the closing backtick.
Span attribute lists can be used to set the format explicitly.

For example, this resource would be formatted as Ruby code:
~~~
Yada yada `puts "hi"`{format: ruby} yada yada.
~~~



## Resource locations (M)

The **Location** is the location of the resource, when encountered by the
Markua Processor. There is no attribute for this; it is inferred from the
location.
* An inline resource is included directly in a Markua manuscript file.
* A local resource is located in the `resources` directory which accompanies
the Markua manuscript (or in a similar conceptual location for a web-based
Markua Processor).
* A web resource is on the web, accessed via `http://` or `https://`.

A resource is either considered a local, web or inline resource based on its
location:

Local Resource
: The resource is stored along with the manuscript--either in a `resources`
directory on a local filesystem, or uploaded to the same web service where the
Markua document is being written.

Web Resource
: The resource is referred to via an `http` or `https` URL.

Inline Resource
: The resource is defined right in the body of a Markua document.

### Local resources

If local resources are used, all local resources must be stored inside a
`resources` directory, or one of its subdirectories. The `resources` directory
is not part of the path to the resource.

Here's how the paths to local resources work:

1. An image called `foo.jpg` in the `resources` directory should be referred to
   as `![](foo.jpg)`, but can also be referred to as `![](resources/foo.jpg)`.
2. An image called `bar.png` in a subdirectory `images` of the `resources`
   directory should be referred to as `![](images/bar.png)`, but can also be
   referred to as `![](resources/images/foo.jpg)`.
3. For security reasons, leading slashes `/` and navigating upward (`../`) are
   not allowed: `![](/foo.jpg)`, `![](/images/bar.png)` and `![](../foo.jpg)`
   are all illegal.

The reason that paths can either include or omit the resources directory is
simple: including it makes it a simple relative path, which means that
Markdown-aware tools that support, say, external images will just work. However,
omitting it is nice to type, so this is something which should be supported as
well. And the reason the resources directory exists is to keep the Markua
manuscript file(s) separate from the resources, to reduce clutter.

Nested directory trees work as well. A file called `foo.rb` in a
`ch1/examples/ruby` directory tree inside the `resources` directory is referenced
as `![](ch1/examples/ruby/foo.rb)` or as `![](resources/ch1/examples/ruby/foo.rb)`.

Markua does not specify whether there are any subdirectories of the `resources`
directory, or what their names are. Since any subdirectories have their names as
part of the path to the resource, authors can do whatever they want. For example,
you can create subdirectories of the `resources` directory for different types of
resource, such as `audio`, `code`, `images`, etc., but you can also just put them
all in the `resources` directory together. To be clear: the names of the
directories have no meaning, and do not restrict the formats of what can go inside
them.

If you are using a hosted service to write in Markua, this service can store
resources wherever it wants. However, if they provide a download (say as a zip
file) they should create the resources directory and provide the uploaded
resources in that directory. If a nested structure is used, it should be exported
that way--if a web service produces paths which reference images inside an images
directory (e.g. as `images/foo.png`), then the zip file containing an export
should contain a `resources` directory which contains an `images` subdirectory
with the images.

### Web resources

If web resources are supported, both `http:` and `https:` resources should be
supported.

Web resources are identified by the absolute URL of the resource on the internet.

### Inline resources

Certain types of resources can be inserted inline in a Markua document:

* `code`
* `image` (of SVG format only)
* `list`
* `math` (either `latexmath` or `asciimath`)
* `table`
* `verbatim`

Since an SVG image is just XML text, it can be contained inline in the text of a
Markua document. This is not true for binary resources like PNG or JPEG images
or any type of audio or video file--these can only be local or web resources.

The syntax for SVG images is discussed later.

</div>



<div class="extension">

# Figures and spans (M)

## A resource with a title is a figure; a resource without a title is a span

The title of a resource can be specified in three ways:

1. In an attribute list: `{title: foo}`
2. In quotes for a local or web resource:
   `![](resource_path_or_url "Optional Figure Title")`
3. In the alt text, assuming an appropriate value of the `alt-title` document
   setting (described below)

Whether the resource has a title determines whether it is called a figure or a
span resource:

1. If a resource has a title provided via any of these three approaches, the
resource is called a **figure**.
2. If a resource does not have a title provided via any of these three
approaches, the resource is called a **span**.

For example, you can add an image in an emoji style like this:

```
Here's a ![poop](poop.png) emoji.
```

Now, this image, like typical emoji, does not have a title, so (assuming that
the `alt-title` document setting is not `all`) the resource is called a span.
There is no figure caption.

Now, if a title was added, things would be different:

```
Here's a ![poop](poop.png "The Year 2022 So Far") emoji.
```

In this case, the image would be a figure, and it would flow in the text as
a figure.

But what if we wanted to specify image alignment? This could be done with an
attribute list like this:

```
Here's a ![poop](poop.png "The Year 2022 So Far"){align: left} emoji.
```

Finally, please note that this example is contrived. A much better way to write
something like this is as follows, using the attribute list in its typical
place above the resource:

```
Here's an emoji.

{align: left}
![poop](poop.png "The Year 2022 So Far")

Let's hope the year improves.
```

This is why almost all figures are added this way. But just because that's the
convention, it does not make it the rule. That is semantically identical to the
following:

```
Here's an emoji.

![poop](poop.png "The Year 2022 So Far"){align: left}

Let's hope the year improves.
```

Finally, when a resource is inserted with a title, it can show up in one of the
lists of figures which can be generated near the start of the book or course.
This can be further customized by the `class` attribute, discussed below.



## The alt-title document setting (M)

The `alt-title` document setting controls whether, in the cases where there is
no figure title explicitly set, the alt text on a resource is removed and used
instead as the figure title.

The `alt-title` can be `all`, `text` or `none`. The default is `text`.

This is what the values mean:

`all`
: If no title is provided for a given resource, regardless of the resource type,
remove the alt text and use it as the figure title instead. (This setting is
closest to the behaviour of LFM and of Markua version 0.10.)

`text`
: If no title is provided for a given **text-based** resource (such as an
external code sample), remove the alt text and use it as the figure title
instead. However, if the resource is not purely text-based, such as an image or
a video, do not remove the alt text to use it as the figure title, even if
no figure title is provided. (This is arguably the most sensible choice.)

`none`
: With this setting, never remove the alt text to use it as the figure title,
even for a text-based resource where no figure title is provided. (This is how
Markdown behaves.)

The default is `text` since it strikes a balance between preserving
compatibility with Markdown for non-text-based resources like images, while
still providing a sensible default for text-based resources like code samples.
Since Markdown does not define support for external text-based resources, there
is no conflict here.

Note that if the alt text is converted into the figure title, it is NOT also
provided as alt text. It would be very annoying to hear the same text spoken
twice (once as the alt text and once as the figure title) when using a screen
reader.

## TODO here

 Recommended values of the `class` attribute include `poem`, `theorem`, or `lemma`. A Markua Processor
could recognize these class attributes and produce a List of Poems, List of
Theorems, or List of Lemmas near the beginning of the document, much like any
other resource types. The `class` attribute is especially handy when used with a
resource of type `markua`.

</div>
