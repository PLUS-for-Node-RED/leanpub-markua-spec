


# Resources (Markua extension)

Markua documents are written in plain text, either in one text file or multiple
text files. However, modern books and courses sometimes contain more than text.
Books and courses may embed many kinds of [resources](@).

Resources vary in four different ways:

1. **Type**: `audio`, `code`, `iframe`, `image`, `list`, `math`, `table`,
   `verbatim`, `video`
2. **Format**: `mp3`, `ruby`, `png`, `latexmath`, `mp4`, etc.
3. **Class**: `span`, `figure`, `equation`, `listing`, `table`, etc.
4. **Location**: Inline, Local, and Web

The list above may make it sound like Markua is somehow incompatible with
Markdown, in either of its Standard Markdown, CommonMark or GFM forms, However,
this is not the case! The changes made by Markua are **purely additive**: the
syntax for images, fenced code blocks, and tables is a superset of that
specified by CommonMark and GFM. All images, fenced code blocks and tables
supported by CommonMark and GFM work in Markua. Markua's changes here are
additions, not modifications. Markua's resources are an extension, both
conceptual and in features, of what was already in CommonMark and GFM.

Specifically, the most important thing that resources do is to provide a
consistent conceptual framework for thinking about all resources, instead of
just a number of different, unrelated things.

Besides that, resources also add add attribute lists, and type, format and class
attributes for all resources, including the resources such as images, fenced
code blocks and tables which are also found in other Markdown dialects.

Attribute lists can be used to specify a figure title and alt text, set an id,
specify the format, and do other useful things.

If you're familiar with Markdown syntax, you'll note that the syntax for local
and web resources is similar to Markdown's inline image insertion syntax, and
that the syntax for inline resources is just the fenced code blocks syntax from
CommonMark with the addition of format specifiers and attribute lists.
Furthermore, the image syntax is the inspiration for the syntax of all local and
web resources.

Note that this section is conceptual, and does not contain HTML mapping which
serves as tests. Those are contained in subsequent sections about each resource
type.

If any resource is missing during book or course generation, a Markua processor
should insert something like the "missing image" often seen on web pages into
the book or course.

TODO

## Resource Types

There are nine types of resources:

1. `audio`
2. `code`
3. `iframe`
4. `image`
5. `list`
6. `math`
7. `table`
8. `verbatim`
9. `video`

Each type of resource has a number of supported formats. Any of the nine
resource types can be inserted as a local resource or web resource, and many of
the resource types can also be inserted as an inline resource.

## Resource Formats

TODO

The **Format** is the format of the resource. It can be specified with the
`type` attribute, or inferred from the file extension (discussed below).
This is important information to help the Markua Processor handle the
resource correctly.

## Resource Classes

TODO

The **Class** determines whether, and how, the resource is presented in a
particular list of resources near the beginning of the book. The `span`
class is special, in that it never shows up in a list of resources. All other
classes of resource may show up in a list of resources, grouped by their
class. The class is completely orthogonal to the type or format of a
resource. For example, all resources in a book could just be categorized as
in the `span` or `figure` class. This would result in a List of Figures
near the beginning of the book, which listed all resources of class figure,
regardless of their `type` (e.g. `image`, `code`, `table`, etc.) or their
`format` (e.g. `jpg`, `ruby`, `csv`, etc.)
TODO  Regardless of
their type or format, resources can be listed in different lists of
classes of resources near the beginning of a book. For example, a book may
choose to only categorize resources as spans or figures. 
lists of
r the category of the resource as far as the Markua Processor
is concerned. The class can be used to differentiate identical types of
Markua resources in various lists, such as a List of Lemmas, List of Poems,
or List of Theorems. When a resource is inserted without an attribute list,
either in a span (such as an emoji in a sentence) or in a block (such as an
image, list or table with no caption), the the `class` is implicitly set to
`span`. Resources with a class of `span` do not show up in any list of
figures. The `class` attribute is discussed further below.


## Resource Locations

TODO

The **Location** is the location of the resource, when encountered by the
Markua Processor. There is no attribute for this; it is inferred from the
location.
* An inline resource is included directly in a Markua manuscript file.
* A local resource is located in the `resources` directory which accompanies
the Markua manuscript (or in a similar conceptual location for a web-based
Markua Processor).
* A web resource is on the web, accessed via `http://` or `https://`.

A resource is either considered a local, web or inline resource based on its
location:

Local Resource
: The resource is stored along with the manuscript--either in a `resources`
directory on a local filesystem, or uploaded to the same web service where the
Markua document is being written.

Web Resource
: The resource is referred to via an `http` or `https` URL.

Inline Resource
: The resource is defined right in the body of a Markua document.

#### Local resources

If local resources are used, all local resources must be stored inside a
`resources` directory, or one of its subdirectories. The `resources` directory
is not part of the path to the resource.

Here's how the paths to local resources work:

1. An image called `foo.jpg` in the `resources` directory should be referred to
   as `![](foo.jpg)`, but can also be referred to as `![](resources/foo.jpg)`.
2. An image called `bar.png` in a subdirectory `images` of the `resources`
   directory should be referred to as `![](images/bar.png)`, but can also be
   referred to as `![](resources/images/foo.jpg)`.
3. For security reasons, leading slashes `/` and navigating upward (`../`) are
   not allowed: `![](/foo.jpg)`, `![](/images/bar.png)` and `![](../foo.jpg)`
   are all illegal.

The reason that paths can either include or omit the resources directory is
simple: including it makes it a simple relative path, which means that
Markdown-aware tools that support, say, external images will just work. However,
omitting it is nice to type, so this is something which should be supported as
well. And the reason the resources directory exists is to keep the Markua
manuscript file(s) separate from the resources, to reduce clutter.

Nested directory trees work as well. A file called `foo.rb` in a
`ch1/examples/ruby` directory tree inside the `resources` directory is referenced
as `![](ch1/examples/ruby/foo.rb)` or as `![](resources/ch1/examples/ruby/foo.rb)`.

Markua does not specify whether there are any subdirectories of the `resources`
directory, or what their names are. Since any subdirectories have their names as
part of the path to the resource, authors can do whatever they want. For example,
you can create subdirectories of the `resources` directory for different types of
resource, such as `audio`, `code`, `images`, etc., but you can also just put them
all in the `resources` directory together. To be clear: the names of the
directories have no meaning, and do not restrict the formats of what can go inside
them.

If you are using a hosted service to write in Markua, this service can store
resources wherever it wants. However, if they provide a download (say as a zip
file) they should create the resources directory and provide the uploaded
resources in that directory. If a nested structure is used, it should be exported
that way--if a web service produces paths which reference images inside an images
directory (e.g. as `images/foo.png`), then the zip file containing an export
should contain a `resources` directory which contains an `images` subdirectory
with the images.

#### Web resources

If web resources are supported, both `http:` and `https:` resources should be
supported.

Web resources are identified by the absolute URL of the resource on the internet.

#### Inline resources

Certain types of resources can be inserted inline in a Markua document:

* `code`
* `image` (of SVG format only)
* `list`
* `math` (either `latexmath` or `asciimath`)
* `table`
* `verbatim`

Since an SVG image is just XML text, it can be contained inline in the text of a
Markua document. This is not true for binary resources like PNG or JPEG images
or any type of audio or video file--these can only be local or web resources.

The syntax for SVG images is discussed later.


## Verbatim Resources

TODO

Since resources can...

In order to prevent cycles (and infinitely long books!), resources are **NOT**
allowed to include other resources: only a Markua document in the root
`manuscript` directory can include resources, and all resources must live inside
the `resources` directory or in a subdirectory inside of it, with nested
subdirectories permitted.

Because of this limitation, a Markua Processor which is building an AST
(Abstract Syntax Tree) from a Markua manuscript can then do exactly one
traversal of the AST, and when it encounters a resource of type `markua` it
should then parse the resource as Markua and replace the Markua resource with
the subtree which is the result of parsing the Markua resource, and there is no
need to do this recursively.


## Resource Attribute Lists

TODO

All resources can be inserted as figures. Figures are the normal case for how a
resource is inserted. In many Markua documents, they will be most or all of the
resources.

The syntax for a local or web resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
![optional alt text](resource_path_or_url "Optional Figure Title")
~~~

The syntax for an inline resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
```optional_format
inline resource content (default format is `guess` with backticks)
```
~~~

The number of backticks can be three or more. This is just the fenced code blocks
syntax, which is discussed later.

You can also insert an inline resource as a figure using three or more tildes
(`~`) as the delimiter:

```
{key: value, comma: separated, optional: attribute_list}
~~~optional_format
inline resource content (default format is `text` with tildes)
~~~
```


## Common Resource Attributes

TODO


### Resource insertion methods

Resources can be inserted either as figures or as spans.

#### Figures


##### Figure attributes

A figure can also have attributes. The supported attributes vary based on the
type of resource, but **all** resources inserted as figures support the
`class`, `format`, `title` and `type` attributes. (As such, these four
attributes are discussed here, instead of on the specific resource types below.)

`class`
: All attribute lists support a `class` attribute. When used in figures, this is
the class of the figure. This can be used for styling, and it can also be used
by Markua Processors which group figures by classes. Recommended values of the
`class` attribute include `poem`, `theorem`, or `lemma`. A Markua Processor
could recognize these class attributes and produce a List of Poems, List of
Theorems, or List of Lemmas near the beginning of the document, much like any
other resource types. The `class` attribute is especially handy when used with a
resource of type `markua`.

`format`
: This is the resource format. Different resource types have different legal
values for format.

`title`
: This is text which is shown near the figure, typically above or below it. A
Markua Processor can choose where to position titles based on any criteria it
chooses. For example, a Markua Processor can position all titles above or
below figures, or use a different behaviour based on the resource format (e.g.
table titles above, image titles below). Note that the figure title itself
may contain the Markua text formatting specified earlier (e.g. bold, italic).
This text is also displayed for the figure wherever the figure is listed
(e.g. List of Illustrations, Table of Tables, etc.).

`type`
: This is the resource type. This is usually inferred from the format instead of
being specified.

The default value of the `class` attribute is `none` when the resource is
inserted as a span. When a resource is inserted as a figure, the default value
of the `class` attribute is determined by the `type` of resource:

* A resource with type `audio` defaults to a class of `recording`.
* A resource with type `code` defaults to a class of `listing`.
* A resource with type `image` defaults to a class of `figure`.
* A resource with type `markua` defaults to a class of `none`. Other values
  of the `class` for `markua` resource types include `poem` and `list`.
  The `none` class is special: it means that the resource is not inserted in any
  special way, but is just inserted as though the author typed it in the
  manuscript. This enables this class of `markua` resource to be used for text
  substitution.
* A resource with type `math` defaults to a class of `equation`.
* A resource with type `video` defaults to a class of `footage`.

To be clear: other than the `none` value, there is nothing magical about the
values of the `class` attribute. An author can set it to whatever they want.
There is a document setting called `list-figures-by-class` which determines
whether the class is used to group figures appropriately. This enables an author
to have, say, a List of Theorems, List of Code Samples, List of Poems, or a
List of Sonnets, produced entirely dynamically based on the values of the
`class` attribute, instead of just a `List of Figures`. See the Document
Settings section for more information.

Figures can have both alt text and a figure title. These are distinct things.
We will discuss the figure title first and the alt text second.

##### Figure titles

A resource which is inserted as a figure can have a figure title.

This title shows up in two places in the output:

1. Near the resource, typically above or below it, per the preference of the
Markua Processor.
2. Based on the resource type, either in the List of Illustrations, List of
Tables or Table of Figures, if they are generated for the book. This text
should also be a crosslink to the title inserted near the figure itself.

The title for a figure can provided in one of two ways:

1. In quotes after the filename or URL of a local or web resource.
   ~~~
   ![](algorithm.rb "My Amazing Algorithm")
   ~~~
2. In the attribute list above the resource.
   ~~~
   {title: "My Amazing Algorithm"}
   ![](algorithm.rb)
   ~~~

The first choice is clearly shorter, as well as more pleasant to write and to
read.

Since inline resources do not use the bracket syntax, any titles must be added
in the attribute list:

~~~
{title: "My Amazing Algorithm"}
```ruby
puts "hello world"
```
~~~

##### Figure alt text

A figure can have alt text, as long as the type of resource being inserted
supports alt text. The resource location does not matter: local, web and inline
resources all support alt text.

The four types of resource which can have alt text when inserted as a figure are
`audio`, `image`, `math` and `video`. Resources of type `code`, `markua` and
`table` do not support alt text, since they themselves are just text.

Alt text is text which is intended to take the place of the resource if the
resource itself cannot be seen. In the case of images, the obvious use case is
for readers with visual disabilities who are using a screen reader, but it also
includes audiobooks and ebook readers which often do not support embedded
images, audio and video, and which may have a hard time displaying math.

Here's an example of good alt text:

~~~
![a red apple, possibly a McIntosh or Spartan](fruit.jpg)
~~~

You can also use an attribute list:

~~~
{alt: "a red apple, possibly a McIntosh or Spartan"}
![](fruit.jpg)
~~~

The alt text should **not** have the same content as the figure title, if the
figure title is present. (Imagine the annoyance for someone with a visual
disability having their screen reader read identical alt text and figure titles
to them throughout an entire book!)

Instead, the alt text should be descriptive of the image content, while the figure
title can be more creative. For example, a figure title may be "Washington
Crossing the Delaware" and the alt text could be "Denzel Washington on a boat in
a river." Having good alt text would enable readers who cannot see the image to
still get the joke which the figure title makes.

##### Figure titles and alt text together

These are some examples of figures with both alt text and a figure title:

~~~
![a red apple](mac.jpg "The Original Mac")

{alt: "a red apple", title: "The Original Mac"}
![](mac.jpg)

{alt: "a blue circle", title: "Earth From Space (Simplified)"}
```!
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```
~~~

##### The figure attribute list takes precedence

It is always an error to specify an attribute both in the attribute list for a
figure and in the syntactic sugar locations, either after the backticks or in the
square brackets.

However, if this is done, then the value in the attribute list takes precedence.

In the following figure, the format is `text` not `ruby`:

~~~
{format: text}
```ruby
puts "hello world"
```
~~~

In the following figure, the alt text would be "foo" not "bar":

~~~
{alt: foo}
![bar](foo.png)
~~~

In the following figure, the title text would be "foo" not "bar":

~~~
{title: foo}
![](foo.png "bar")
~~~

Again, the Markua Processor should treat all of these as an error.

#### Spans

Inserting a resource as a span means to continue the block context which it is
in, instead of starting a new leaf block for the resource.

There are three types of resources which can be inserted as spans:

1. Single-line inline code resources.
2. A `math` resource (regardless of location) without a title.
3. A local or web `image` resource without a title.

An inline code resource can be inserted as a span using the following syntax:

~~~
backtick `resource`format backtick
~~~

The math formats, including the syntactic sugar for them, are discussed later.

A local image resource without a title can be inserted as expected:

~~~
This is an ![a red apple](mac.jpg) not a banana.
~~~

A web image resource without a title can be inserted as expected:

~~~
This is an ![a red apple](http://markua.com/mac.jpg) not a banana.
~~~

Note that inline image resources cannot be inserted as spans, since even SVG is
so verbose it would make the resulting document very hard to read.

Also, note that if you wish to insert an image in the middle of a sentence,
chances are you are trying to insert an emoji. You can do this with a span image,
if you want exact control of what your emoji look like. However, note that emoji
also have special support in Markua, described [here](#emoji).

Finally, if a title is present, the Markua Processor must treat the resource
as having implicit newlines before and after it, so that it is handled as a
figure. (Figure titles do not make sense inside of sentences.)

~~~
This is ![a red apple](mac.jpg "The Original Mac") not a banana.
~~~

##### Span attribute lists can be used to set the format

When a resource is inserted as a span, the resource is inserted as part of the
flow of text of a paragraph with no newlines before or after it. A span resource
is intended to be extremely short and simple.

By default, the type of an inline resource is `code` and the format is `guess`.
Math and SVG images override this using special syntaxes, discussed later.

However, to support rare use cases, any span can have an attribute list. The
attribute list on a span is specified immediately after the closing backtick.
Span attribute lists can be used to set the format explicitly.

For example, this resource would be formatted as Ruby code:
~~~
Yada yada `puts "hi"`{format: ruby} yada yada.
~~~


### Resource formats

Both the type and the format can be specified in an attribute list, by the
respective `type` and `format` attributes.

The type and the format can also be inferred from the file extension and, in the
case of web resources, the URL.

Markua Processors must interpret all unspecified file extensions as specifying a
resource of type `code` with a format of `guess`, unless the resource is a web
resource.

If the type and format are not specified and the resource is a web resource, the
Markua Processor may use the domain to decide what type of resource to assume.
For example, a domain of `youtube.com` may be assumed to be of type `video`, a
domain of `instagram.com` may be assumed to be of type `image`, and a domain of
`github.com` may be assumed to be of type `code`.

If the type is not specified in the attribute list, the format determines the
type. The formats can either be specified by the `format` attribute or (in most
cases) inferred from the file extension for local and web resources. (Inline
resources obviously have no file extension, since they are contained in the body
of a Markua document.)

As an author, all you typically do is provide the correct file extension for a
local resource or set the format in the attribute list. Markua recognizes the
format, and uses it to determine the type. If the format is unrecognized, then
the resource is treated as a resource of type `code` and with a format of
`guess`.

It's important to emphasize that the type and format of a resource can be
overridden using an attribute list. The file extensions just set the default
type and format that are inferred.

In rare instances, it is useful to override the `type` and `format` which have
been inferred by the Markua Processor based on the file extension of the
resource. This is done by specifying a type and/or format in the attribute list
of the resource.

The following sections list the various resource formats for each type of
resource, along with the file extensions which make that format and type be
inferred. Note that these file extensions are case-insensitive.

#### Audio resource formats

* `aac` - AAC audio - `.aac`, `.m4a`
* `mp3` - MP3 audio - `.mp3`
* `ogg` - Ogg Vorbis  - `.oga`, `.ogg`
* `wav` - WAV audio - `.wav`, `.wave`

#### Image resource formats

* `jpeg` - JPEG image - `.jpg` or `.jpeg`
* `gif` - GIF image - `.gif`
* `png` - PNG image - `.png`
* `svg` - SVG image - `.svg`
* `svgz` - SVG image (zipped) - `.svgz`

#### Math resource formats

Note that AsciiMath and LaTeX math are almost always contained as inline
resources in a Markua document. They only have file extensions for completeness.
Also, note that `.tex` is assumed to be LaTeX math, not a vanilla LaTeX file.
There is a simple reason for this: Markua needs LaTeX math for math, but only
needs to display LaTeX for people writing about LaTeX. So, if you have a LaTeX
file with an extension of `.tex` that just contains LaTeX code and you want to
display it, then add a `{type: code, format: latex}` attribute list.

* `asciimath` - AsciiMath math - `.asciimath`
* `latexmath` - LaTeX math - `.tex`

Note that the assumption is that AsciiMath will almost always be used as an
inline resource. So, the `.asciimath` file extension is deliberately verbose.

#### Table resource formats

Tables can be formatted either as Markua tables or, for tables which are
local or web resources, as CSV-format tables. (CSV-format tables are not
supported as inline resources, since they would result in too many
false-positives.)

* `markua` - Markua table - `.tbl`
* `csv` - Comma-Separated Values table - `.csv`

#### Markua resource formats

The `markua` resource format is always `markua`. The way that `markua` resources
are differentiated is via their `class` attribute.

* `markua` - Markua - `.md`

#### Video resource formats

Note that .mp4 is used for MP4 video, not MP4 AAC audio.

* `mp4` - MP4 video - `.mp4`
* `webm` - WebM video - `.webm`

#### Code resource formats

Note that most code languages are not specified, and are guessed at with a format
of `guess`. A Markua Processor typically leaves this decision about the language
recognized to the syntax highlighter, such as Pygments.

* `text` - Unformatted code (with no syntax highlighting)
* `guess` - Formatted code, with the language guessed at - any other file
  extension not listed previously in the sections above

</div>


<div class="extension">

## Code resources

Code can be a local, web or inline resource, just like any other resource, and
the same resource syntax applies to code as to all other resources.

As discussed, code cannot have alt text. It's just text. If any alt text is
provided for a code resource, it is ignored.

Markua specifies only one specific file extension to be associated with a type
of `code`: the `.txt` extension, which is for the format of `text`. However,
Markua Processors must interpret **all** unspecified file extensions as
specifying a resource of type `code` with a format of `guess`.

Regardless of whether syntax highlighting is supported and the programming
language is detected, all code must be formatted as `monospaced text` by Markua
Processors.

The `text` format means to not do any syntax highlighting as well.

The `guess` format is a request for the Markua Processor to guess at the
programming language based on the file extension and/or the syntax of the code
itself. Then, if the detected language corresponds to a particular programming
language which the Markua Processor recognizes, and if the Markua Processor
supports syntax highlighting, then it can format the resource as nicely
syntax-highlighted code. Syntax highlighting is entirely optional in Markua
Processors. If a Markua Processor does not support syntax highlighting, and/or
if it cannot detect a matching supported programming language, then it must
format the code as though the format was `text`--i.e. to format it as
unformatted monospaced text.

Besides the `text` and `guess` values of the format attribute, you can also
specify the programming language by setting the format attribute to a specific
programming language. This is more reliable than `guess`. Unlike other resource
types, Markua does not specify the complete set of the values of the `format`
attribute--there are so many programming languages in the world, and new ones
are added so frequently, that doing so would be impractical.

However, while a complete set of the values of the `format` attribute is not
specified, Markua does specify the `console` value of the `format` attribute to
indicate console input. A Markua Processor should format console input as such.
(For example, Leanpub uses the open source Pygments library for its code
formatting, and Pygments handles `console` format correctly, so Leanpub gets this
for free.)

The default value of the format attribute for code is complex:

1. For code which is inserted as a span (which is only supported with inline
   resources), the default format is `text`.
2. For code which is inserted as a figure which is inserted as an inline
   resource using three tildes, the default format is `text`.
3. For all other code, the default format is `guess`. This includes local and web
   resources inserted as figures, and code inserted as an inline figure using
   three backticks.

Note that the default format can be overridden by specifying it via an attribute
list, or after the three backticks in syntactic sugar.

### Supported Attributes for Code

The following are the supported attributes for code resources, in addition to the
`class`, `format`, `title` and `type` attributes which all resources support.

`line-numbers`
: This determines whether the code sample shows line numbers. Legal values are
`true` or `false`. The default value is `false`. Any value other than `true` is
interpreted as `false`.

`number-from`
: If line numbers are shown, this lets you override the starting number of the
line numbers. The default value is `1`.

`crop-start`
: Sometimes it's desirable to only show part of a code resource defined in an
external file as the code example. The `crop-start` and `crop-end` attributes let
you accomplish this. The `crop-start` attribute defines the line which represents
the first line included from the resource. For example, `{crop-start: 10,
crop-end: 15, line-numbers: true, number-from: 10}` ensures that lines 10-15 are
shown and are numbered as lines 10-15. The default value is 1, which is the first
line of the file.

`crop-end`
: This attribute ends the range started with crop-start. The default value of
`crop-end` is to be omitted, which is equivalent to specifying the last line of
the file.

#### Default Value of the `format` attribute in Inline Code Samples

The default value of the `format` attribute for a code resource inserted as a
figure varies based on context.

If the code resource is a local or web resource, it defaults to `guess`.

If the code resource is an inline resource, the default varies based on the
delimiter, and whether the code is inserted as a span or as a block.

With three backticks the default format is `guess`, and with three tildes, the
default format is `text`. This way, you can vary the default without having to
type an attribute list: if you want the code language guessed at, use backticks;
if you don't, use tildes. Of course, you can specify any attributes you wish
with either delimiter, and specified attributes override default ones. The only
reason there are different defaults are to make things easier to type.
Programmers refer to such niceties as "syntactic sugar".

The default value of block code resources inserted with three backticks can be
overridden from `guess` to some other value by setting by the
`default-code-language` attribute on the entire Markua document. (This attribute
has no effect on resources inserted with three tildes.) The default value of
code span resources inserted as spans with single backticks can be overridden
from the default value of `text` to some other value by setting the
`default-code-span-language` on the entire Markua document.

### Local Code Resources

Local code resources can be inserted as a figure.

This first figure will be a type of code and a format of `guess`. A Markua
Processor which associates `.rb` file extensions with Ruby code will treat this
as Ruby code; a Markua Processor which has no association for `.rb` files will
treat it as plain text:

~~~
Here's a paragraph before the figure.

![](hello.rb "Hello World in Ruby")

Here's a paragraph after the figure.
~~~

That is equivalent to:

~~~
Here's a paragraph before the figure.

{format: guess}
![](hello.rb "Hello World in Ruby")

Here's a paragraph after the figure.
~~~

If you don't want to take chances you can do this:

~~~
Here's a paragraph before the figure.

{format: ruby}
![](hello.rb "Hello World in Ruby")

Here's a paragraph after the figure.
~~~

Note that the title is optional in all figures:

~~~
Here's a paragraph before the figure.

![](hello.rb)

Here's a paragraph after the figure.
~~~

### Web Code Resources

Web code resources function identically to how local code resources work,
including the significance of file extensions. The only differences is that the
files are on the web.

This will be a type of code and a format of `guess` since the file extension is
not specified:

~~~
![](http://markua.com/hello.rb "Hello World in Ruby")
~~~

That is equivalent to:

~~~
{format: guess}
![](http://markua.com/hello.rb "Hello World in Ruby")
~~~

If you don't want to take chances you can do this:

~~~
{format: ruby}
![](http://markua.com/hello.rb "Hello World in Ruby")
~~~

### Inline Code Resources

Inline code resources are the most flexible way to insert code. They are the only
way to insert code as a span resource, and the most straightforward way to add
short code examples as figures.

The great thing about inline code resources, either as spans or figures, is that
they work the same way as they do in CommonMark and GFM, with small additions
by Markua.

#### No Attribute Lists or Format Specifiers on Indented Code Blocks

Indented code blocks are supported for compatibility with CommonMark and GFM.
However, no attribute lists or format specifiers can be used. If you want to use
them, use a fenced code block.

#### Attribute Lists and Format Specifiers on Fenced Code Blocks

Fenced code blocks, discussed earlier, are how to insert inline code resources
as figures. These can have attribute lists or format specifiers.

This will be a type of code and a format of `guess` since three backticks are
used and since the format is not specified:

~~~
Some paragraph.

```
puts "hello"
```

Some paragraph.
~~~

That is equivalent to:

~~~
Some paragraph.

```guess
puts "hello"
```

Some paragraph.
~~~

If you don't want to take chances you can do this to explicitly specify the
format:

~~~
Some paragraph.

```ruby
puts "hello"
```

Some paragraph.
~~~

This Ruby code may be formatted as such if the Markua Processor understands
`ruby`. If not, the `ruby` format will be ignored.

If you don't like syntactic sugar you can do:

~~~
Some paragraph.

{format: ruby}
```
puts "hello"
```

Some paragraph.
~~~

If you want a figure title, you can add it to the attribute list with any of
the above. For example:

~~~
Some paragraph.

{title: "Hello World in Ruby"}
```ruby
puts "hello"
```

Some paragraph.
~~~

Finally, if you want the code to definitely not get syntax highlighted, you can
force format to be `text` in one of two ways.

First, you can set it explicitly:

~~~
Some paragraph.

```text
puts "hello"
```

Some paragraph.
~~~

Second, you can use three tildes instead of three backticks, since the default
with tildes is `text` not `guess`:

```
Some paragraph.

~~~
puts "hello"
~~~

Some paragraph.
```

As discussed previously, console input and output should be formatted as such by
a Markua Processor:

~~~
```console
$ git init
Initialized empty Git repository in /path/to/repo
```
~~~

Finally, it's important to note that when you are writing about other inline
formats, such as SVG or AsciiMath, what you are really doing is creating a code
resource. This is shown in the sections below, which discuss SVG and AsciiMath,
but this applies more broadly.

#### Attribute Lists on Code Spans

Code spans are discussed later in the spec. While code spans are done just as in
CommonMark and GFM, Markua adds one thing: attribute lists to specify the format.
This serves as a hint to any syntax highlighter:

~~~
Hello World in Ruby is a simple `puts "hello world"`{format: ruby} statement.
~~~

### Marking Code as Added or Deleted

Markua supports marking code as added or deleted, which can be helpful if you are
writing a computer programming book and want to indicate what code should be
added or removed to a larger program.

The way to do this is to add special comment lines to your code.

The magic words are `markua-start-insert`, `markua-end-insert`,
`markua-start-delete` and `markua-end-delete`. Any line containing one of those
words will be removed completely by a Markua Processor before being inserted into
the output.

The Markua Processor will then be able to determine which code is being deleted
or inserted, and format it accordingly. The recommended way for a Markua
Processor to do this is to make code which is being inserted get **`bolded`**,
and to make code which is getting deleted to be put in ~~`strikethrough`~~.

Finally, while syntax highlighting is optional in a Markua Processor, if a Markua
Processor does support syntax highlighting it is allowed for the Markua Processor
to not do any syntax highlighting when there is the presence of any of any
special `markua-*` comments. Syntax highlighting may make it harder to notice the
added and removed code, if they are formatted with bold and strikethrough
respectively.

### Line Wrapping in Code Resources

Code resources should have newlines added by the author to ensure that automatic
line wrapping is not relied upon. Markua Processors may wrap lines to ensure that
all code is visible on a page, and *may* add continuation characters (like the
backslash `\` character) in the output to indicate that a line has been
automatically wrapped. However, adding a continuation character is not a
requirement, nor is the choice of which continuation character is used.

</div>


<div class="extension">

## Markua Resources

Markua resources (i.e. a resource with a `type` of `markua`) can be a local, web
or inline resource, just like any other resource, and the same resource syntax
applies to Markua resources as to all other resources.

There are three main use cases for a Markua resource:

1. Inserting a specific `class` of resource, such as a `poem`.
2. Inserting boilerplate, such as a legal disclaimer, which may be needed to be
   used in many places and/or sourced from a third party.
3. Controlling the behaviour of fonts or whitespace for specific types of
   text, such as poetry.

The following are the supported attributes for resources of type `markua`:

`type`
: For a Markua resource, the `type` is `markua`. This can be specified
explicitly, and it can be inferred as the type for all files with a `.md`
.extension.

`class`
: This can define a specific `class` of resource, such as a `poem` or `list`.
The default is `none`, which means that the resource is not inserted in any
special way, but is just inserted as though the author typed it in the
manuscript. This enables this class of `markua` resource to be used for text
substitution, without showing up in some list of resources near the front of the
book. There is semantic sugar to produce inline resources of type `markua` and
class `poem`; see below for details.) A Markua Processor can produce a list of a
given class of resource near the beginning of the document, such as a List of
Poems or a List of Lists.

`monospaced`
: `true` or `false`. The default is `false`. If `true`, the Markua Processor
must use a monospaced font to output the text in the resource. If false, the
Markua Processor may use whatever font (proportional or monospaced) it is
configured to use to output Markua text. The value of `true` can be useful for
certain types of poetry, for example.

`format`
: This is the resource format. For a Markua resource, the format is always
just `markua`, and should be ignored by a Markua Processor.

`title`
: This is text which is shown near the figure, typically above or below it. A
Markua Processor can choose where to position titles based on any criteria it
chooses. For example, a Markua Processor can position all titles above or
below figures, or use a different behaviour based on the resource format (e.g.
table titles above, image titles below). Note that the figure title itself
may contain the Markua text formatting specified earlier (e.g. bold, italic).
This text is also displayed for the figure wherever the figure is listed
(e.g. List of Illustrations, Table of Tables, etc.).

`whitespace`
: `semantic` or `verbatim`. The default is `semantic`. With the default value of
`semantic`, whitespace is processed the way that Markua handles it. With the
value of `verbatim`, leading whitespace, internal whitespace, trailing
whitespace and newlines must all be preserved verbatim as typed. This can be
useful for certain types of poetry, such as indenting the last two lines of a
sonnet. To be clear, this includes all spaces and newlines, regardless
of whether they are leading, internal or trailing spaces, and regardless of the
number of consecutive leading, internal or trailing spaces or the number of 
newlines. Now, while the whitespace is preserved, it is rendered using either a
proportional font or a monospaced one based on the value of the `monospaced`
attribute. If whitespace is verbatim, the `markua` resource should have newlines
added by the author to ensure that automatic line wrapping is not relied upon.
Markua Processors may wrap lines to ensure that all the text is visible on a
page, and *may* add continuation characters (like the backslash `\` character)
in the output to indicate that a line has been automatically wrapped by the
Markua Processor. Obviously, seeing a continuation character is in poetry is
terrible, so the author should consider this a mistake that needs to be fixed by
manually line wrapping.

### Local Markua resources

Local Markua resources look like many other resources inserted as figures:

~~~
Here's a Shakespearean sonnet, which will not have a `class` and which will
default to semantic whitespace:

![](sonnet130.md "Sonnet 130")

Here's a Shakespearean sonnet, which will not have a `class` and which will
have its whitespace preserved (for indenting the last two lines):

{whitespace: verbatim}
![](sonnet130.md "Sonnet 130")

Here's a Shakespearean sonnet, which will have a `class` of `poem` and which
will have its whitespace preserved (for indenting the last two lines):

{class: poem, whitespace: verbatim}
![](sonnet130.md "Sonnet 130")

Here's a Shakespearean sonnet, which will have a `class` of `poem` and which
will have its whitespace preserved (for indenting the last two lines):

{monospaced: false, class: poem, whitespace: verbatim}
![](sonnet130.md "Sonnet 130")

Here's a list of Canadian cities sorted by population. This implicitly has a
`class` of `none`:

![](cities.md "Canadian Cities by Population")

Here's that same list, but with an explicit class of `none`:

{class: none}
![](cities.md "Canadian Cities by Population")

Here's that same list, but with a class of `list` so it shows up in a List of
Lists, if there is one:

{class: list}
![](cities.md "Canadian Cities by Population")

Here's some legal boilerplate:

![](tos.md "Terms and Conditions")

Here's some legal boilerplate, with the explicit class of `none`:

{class: none}
![](tos.md "Terms and Conditions")

Here's an E. E. Cummings poem:

{monospaced: true, class: poem, whitespace: verbatim}
![](iwillbe.md "I Will Be")
~~~

With a non-`.md` extension, the type of `markua` must be stated:

~~~
Here's a Shakespearean sonnet:

{type: markua, class: poem, whitespace: verbatim}
![](sonnet130.txt "Sonnet 130")

Here's a Shakespearean sonnet:

{type: markua, class: poem, whitespace: verbatim, monospaced: false}
![](sonnet130.txt "Sonnet 130")

Here's some legal boilerplate:

{type: markua}
![](tos.txt "Terms and Conditions")

Here's an E. E. Cummings poem:

{type: markua, class: poem, whitespace: verbatim, monospaced: true}
![](iwillbe.txt "I Will Be")
~~~

### Web Markua resources

Web Markua resources function identically to how local Markua resources work,
including the significance of file extensions. The only difference is that the
files are on the web.

~~~
Here's a Shakespearean sonnet:

![](http://markua.com/sonnet130.md "Sonnet 130")

Here's a Shakespearean sonnet:

{type: markua}
![](http://markua.com/sonnet130.txt "Sonnet 130")

{type: markua, class: poem, whitespace: verbatim, monospaced: false}
![](http://markua.com/sonnet130.txt "Sonnet 130")

Here's a paragraph after the figure.
~~~

### Inline Markua resources

You might wonder why an inline resource of type `markua` would be supported at
all. After all, isn't it just Markua text?


Defaults:




There are three reasons it is supported:

1. for consistency
2. for the attribute lists, which allow configurable whitespace, etc.
3. so that the resource can show up in a list of resources

To create an inline resource of type `markua`, you use the fenced code block
syntax, and you can use an attribute list to specify the type of resource.

You can also use one of a handful of syntactic sugar options:

`&`
: equivalent to `{type: markua, whitespace: verbatim, monospaced: false}`

`&&`
: equivalent to `{type: markua, class: poem, whitespace: verbatim, monospaced: false}`

`*`
: equivalent to `{type: markua, whitespace: verbatim, monospaced: true}`

`**`
: equivalent to `{type: markua, class: poem, whitespace: verbatim, monospaced: true}`

This is made clear in the following example:

~~~
Here's part of a poem:

```&
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```

That is equivalent to:

{type: markua, whitespace: verbatim, monospaced: false}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```

Here's part of a poem:

```&&
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```

That is equivalent to:

{type: markua, class: poem, whitespace: verbatim, monospaced: false}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```

Here's part of a poem:

```*
i
  *am*
      a        cat
            a        **l a z y**          cat

me   ow
```

That is equivalent to:

{type: markua, whitespace: verbatim, monospaced: true}
```
i
  *am*
      a        cat
            a        **l a z y**          cat

me   ow
```

Here's part of a poem:

```**
i
  *am*
      a        cat
            a        **l a z y**          cat

me   ow
```

That is equivalent to:

{type: markua, class: poem, whitespace: verbatim, monospaced: true}
```
i
  *am*
      a        cat
            a        **l a z y**          cat

me   ow
```
~~~

I'm not a poet, but I know it.

Finally, here's an example of an inline Markua resource being used for a list:

~~~
{class: list, title: "Canadian Cities by Population"}
```
1. Toronto
2. Vancouver
```
~~~

Despite the seeming generality of this example, it's actually fairly niche:
most lists are just lists, not resources, and do not need to be wrapped in a
resource.

### But what if I want every character taken literally?

If you want to type poetry where every character is taken exactly literally,
instead of being potentially interpreted as Markua formatting, you need to use
a code block with a format of text for that:

```````````````````````````````` example
```text
*this* isn't italic
and **this** is not bold
* * * cherry blossoms * * *
```
.
<pre><code>*this* isn't italic
and **this** is not bold
* * * cherry blossoms * * *
</code></pre>
````````````````````````````````

</div>




<div class="extension">

## Table resources

As shown in the Tables section, the syntax to insert a table in Markua is
the identical syntax to that used by GFM. (That section is unchanged from the
GFM spec, which is built on top of the CommonMark spec.)

Just as Markua reinterprets Markdown concepts like images as being resources,
Markua also reinterprets GFM tables as being a resource. This is important for
two reasons, in the case of tables:

1. Resources can have attribute lists.
2. Resources can be inline, local or web resources.

So, Markua supports attribute list on tables, and tables which are inline,
local or web resources:

* Inline means "in the document"; all tables in GFM are inline.
* Local means in the resources folder in a separate file, which can be helpful
  for keeping large tables from cluttering up your manuscript.
* Web means at some http or https URL.

Both local and web resources can be very useful for including data sourced from
an external data source, as well as making them easier to keep correct.

The following are the supported attributes for table resources, in
addition to the `class`, `format`, `title` and `type` attributes which all
resources support:

`align`
: The `align` can be `left`, `right` or `middle`. The default is `middle`.
This works the same way it does for images. Note that it applies to the position
of the entire table, not to the cells within it. In terms of the specific values
of `align`, a Markua Processor must interpret `left` as "on the left side of the
page", `right` as "on the right side of the page" and `middle` as "in the middle
of the content area of the page, respecting margins" in all cases. Finally, note
that `inside` and `outside` are not supported for `align`.

`column-widths`
: The column widths are a whitespace-separated list of numbers (integers and/or
floats) and/or * symbols, from left to right, as a percentage of the total table
width. In this attribute value, * means for the column to use the remaining
space, equally divided between it and any other column with the * attribute.
Some examples are: `{column-widths: "10% 30% * 10%"}`,
`{column-widths: "10% * 40% *"}`, `{column-widths: "10% 30% * 12.5%"}`,
`{column-widths: "95% * *"}`. The numbers used for the column-widths percentages
must sum to exactly 100 (if only numbers are used), or to less than 100 (if
there are any `*`s used). Every specified value must be at least 1, and every
`*` must compute to at least 1. The number of values (numbers or `*`s) must
match the number of columns. Like with the width attribute, the percentage sign
(`%`) is required, to make it absolutely clear that these are not measurements
in pixels or points.

`crop-start`
: Sometimes it's desirable to only show part of a table resource defined in an
external file. The `crop-start` and `crop-end` attributes let you accomplish
this. The `crop-start` attribute defines the line which represents the first
line included from the resource. For example, `{crop-start: 10, crop-end: 15,
line-numbers: true, number-from: 10}` ensures that lines 10-15 are shown. The
default value is 1, which is the first line of the file. The `crop-start`
attribute is only valid for `csv` format tables, not `markua` format tables.

`crop-end`
: This attribute ends the range started with crop-start. The default value of
`crop-end` is to be omitted, which is equivalent to specifying the last line of
the file. The `crop-end` attribute is only valid for `csv` format tables, not
`markua` format tables.

`footer`
: `true`, `false` or `dynamic`. The default is `dynamic` for `markua` format
tables, and `false` for `csv` format tables. If `dynamic`, the existence of a
footer is determined by whether the content of the table contains a footer.
For a `csv` format table, `true` means that the last row is treated as a footer
row, and `false` means that the last row is not treated as a footer row.

`format`
: The `format` can be either `markua` (the default) or `csv`. The `csv` format
can ony be used with local or web resources, to reduce false positives.
CSV-format table resources are discussed in the next section.

`header`
: `true`, `false` or `dynamic`. The default is `dynamic` for `markua` format
tables, and `true` for `csv` format tables. If `dynamic`, the existence of a
header is determined by whether the content of the table contains a header.
For a `csv` format table, `true` means that the first row is treated as a header
row, and `false` means that the first row is not treated as a header row.

`width`
: The width of the table, in percentage of page content area width (respecting
margins). This is specified as an number (integer or float) between 1 and 100
followed by a percentage sign (%). The quotes are optional. So, you can say
`{width: "70%"}`, `{width: 70%}`, `{width: "70.5%"}` or `{width: 70.5%}`.

The examples below assume that a table which looks like the following (from the
GFM table example above) is defined in a file called `census.tbl` (real census
data would be too long for a good example):

```````````````````````````````` example
| foo | bar |
| --- | --- |
| baz | bim |
.
<table>
<thead>
<tr>
<th>foo</th>
<th>bar</th>
</tr>
</thead>
<tbody>
<tr>
<td>baz</td>
<td>bim</td>
</tr>
</tbody>
</table>
````````````````````````````````

With this table above defined in a file which is available at a local
resource location, the following example results:

```````````````````````````````` example
![](census.tbl "Canadian Census Data")
.
<figure>
  <table>
  <thead>
  <tr>
  <th>foo</th>
  <th>bar</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  <td>baz</td>
  <td>bim</td>
  </tr>
  </tbody>
  </table>
  <figcaption>Canadian Census Data</figcaption>
</figure>
````````````````````````````````

With this table above defined in a file which is available at a given web
resource location, the identical example results:

```````````````````````````````` example
![](http://markua.com/census.tbl "Canadian Census Data")
.
<figure>
  <table>
  <thead>
  <tr>
  <th>foo</th>
  <th>bar</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  <td>baz</td>
  <td>bim</td>
  </tr>
  </tbody>
  </table>
  <figcaption>Canadian Census Data</figcaption>
</figure>
````````````````````````````````

Table resources should be defined in a file with a `.tbl` extension. If the
extension is different, then there **must** be a `type: table` attribute in the
attribute list.

In the interest of brevity, some other examples of usage are below.

With the `.tbl` extension, the `table` type is inferred:

```
{title: "Canadian Census Data"}
![](census.tbl)

![](census.tbl "Canadian Census Data")

![Canadian Census Data](census.tbl)

{title: "Canadian Census Data", column-widths: "30% *"}
![](census.tbl)

{column-widths: "30% *"}
![](census.tbl "Canadian Census Data")

{column-widths: "30% *"}
![Canadian Census Data](census.tbl)
```

With a non-`.tbl` extension, the `table` type must be specified:

```
{type: table}
![](census.txt "Canadian Census Data")

{type: table, title: "Canadian Census Data"}
![](census.txt)

{type: table, title: "Canadian Census Data", column-widths: "30% *"}
![](census.txt)
```

Recall that the resource syntax is as follows:

```
{key: value, comma: separated, optional: attribute_list}
![optional alt text](resource_path_or_url "Optional Figure Title")
```

Note that there is some flexibility in the title attribute. If the `alt-title`
document setting is `text` (the default) or `all`, then the alt text can be used
as the title as well. (If the `alt-title` is `none`, then it cannot.)

So, assuming a value of `text` or `all` for a document setting, this also works:

```
![Canadian Census Data](census.tbl)
```

(This is arguably the nicest looking version, and since tables are a text
resource there are no accessibility concerns about there being no alt text.)

This syntax can be used with an attribute list, of course:

```
{type: table}
![Canadian Census Data](census.txt)
```

Finally, if there is both alt text and a title attribute, the alt text is
clobbered by the title:

```
{align: middle, width: 80%, title: "Canadian Census Data"}
![some alt text which gets clobbered by the title](census.tbl)
```

</div>


<div class="extension">

## CSV-format Table resources

As discussed above, tables (i.e. resources of type `table`) which are local or
web resources can have a `csv` format, instead of the default `markua` format.

For a `csv`-format table, the existence of a header and/or footer row cannot be
inferred from the data, and must be specified in an attribute list. The default
value of `header` is `true`, and the default value of `footer` is `false`.

Also, as discussed, a `csv` table can have `crop-start` and `crop-end`
attributes, for easily presenting a subset of a larger CSV. If `crop-start` and
`crop-end` are used with `header` of true, the header should be displayed by the
Markua Processor.

Examples:

```
{type: table, format: csv}
![Canadian Census Data](census.csv)

{type: table, format: csv, title: "Canadian Census Data"}
![](census.csv)

{type: table, format: csv}
![](census.csv "Canadian Census Data")

{type: table, format: csv, header: true}
![Canadian Census Data](census.csv)

{type: table, format: csv, header: true, footer: true}
![Canadian Census Data](census.csv)

{type: table, format: csv, header: true, footer: true, crop-start: 5, crop-end: 10}
![Canadian Census Data](census.csv)
```

</div>






<div class="extension">

## Block quotes with curly braces (Markua extension)

Block quotes in Markua are created in one of two ways:

1. By prefacing lines with `> `, i.e. a greater than character followed by a
space. This was shown above.
2. By wrapping the blockquote in `{blockquote}` ... `{/blockquote}`

Option #1 is preferable for short quotes; option #2 is easier on authors for
really long quotes.

Like figures and tables, blockquotes can be inserted in the middle of a
paragraph or as a sibling of it.

These are the two ways to make block quotes in Markua:

```````````````````````````````` example
This is the first paragraph.

> This is a blockquote.
>
> You saw this above.

This is the second paragraph.

{blockquote}
This is also a blockquote.

It is good for longer quotes.
{/blockquote}

This is the third paragraph.
.
<p>This is the first paragraph.</p>
<blockquote>
<p>This is a blockquote.</p>
<p>You saw this above.</p>
</blockquote>
<p>This is the second paragraph.</p>
<blockquote>
<p>This is also a blockquote.</p>
<p>It is good for longer quotes.</p>
</blockquote>
<p>This is the third paragraph.</p>
````````````````````````````````

If a blockquote contains headings, these headings may be formatted by a Markua
Processor differently than normal headings. Finally, if a Markua Processor is
automatically generating a [Table of Contents](#toc) from chapter and section
headings, any headings inside blockquotes should be ignored.

</div>









<div class="extension">

## List attributes (Markua extension)

By default, Markua keeps the behaviour of lists to be identical to that in
Markdown, as described by John Gruber and specified by CommonMark.
The enhancements that Markua makes to lists are purely additive: if you use any
CommonMark-compliant list in a Markua document, it will work exactly as it would
in CommonMark.

Now, lists in CommonMark have some major limitations. Here are two of the
biggest ones:

1. You can't output descending order lists.
2. You can't output letters or Roman numerals for labels in an ordered list.

This list gets rendered as 3,4,5 (not 3,2,1), since Markdown does not have a way
of specifying that a list is descending, and it does not infer it from the order
by default:

```````````````````````````````` example
before

3. foo
2. bar
1. baz

after
.
<p>before</p>
<ol start="3">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This looks like a list, but it is in fact a paragraph. There are no break tags
after the foo, bar and baz, just soft breaks:

```````````````````````````````` example
before

a. foo
b. bar
c. baz

after
.
<p>before</p>
<p>a. foo
b. bar
c. baz</p>
<p>after</p>
````````````````````````````````

Again, both of these behaviours are as defined in the CommonMark spec.

Now, Markua can't change this by default, without being incompatibile with
Markdown.

Also, CommonMark allows [slight inconsistency](#example-295) in the amount of
indentation of list items. I understand why, but this allows for documents which
are incomprehensible and ugly. However, Markua must keep compatibility with
CommonMark lists, so this is allowed.

So what to do?

Markua adds the **list attributes** extension.

Adding attributes to lists allows them to output all the needed types of list
from the limited list support in CommonMark, without introducing breaking
incompatibilities to CommonMark lists.

It is certainly possible to define a better list syntax than Markdown's: I have
previously done exactly that, specifying a syntax for complex lists which was
superior to Markdown's lists. Furthermore, Leanpub even implemented support for
it! However, this syntax introduced incompatibilites with Markdown, and the
tradeoff was not worth it. Markua's list enhancements must be purely additive
to CommonMark lists, not incompatible with them in any way. They cannot
introduce any breaking changes to existing CommonMark lists, or authors will be
justifiably unhappy.

The way the list attributes extension works is simple: it gives lists the
ability to have an **attribute list**, much like how resources can have an
attribute list. (Lists are not resources, however. That would not just be
overkill, it would result in incompatibilites.)

### Supported Attributes for Lists

The following are the supported attributes for lists.

`reversed`
: This determines whether the list is in ascending or descending order. Legal
values are `true` or `false`. The default value is `false`, for ascending.
Any value other than `true` is interpreted as `false`.

`type`
: The type of the list marker to use. Valid choices are `1`, `A`, `a`, `I` or
`i`. `A` and `a` mean uppercase or lowercase letters; `I` or `i` mean uppercase
or lowercase Roman numerals.

`delimiter`
: The type of the list delimiter to use, in output formats which allow custom
list delimiters. Valid choices are `"."` or `")"`. The default value is inferred
by the delimiter used: if you use periods `.` to delimit the list, then the
delimiter is `.`; if you use closing parentheses `)` to delimit the list, then
the delimiter is `)`. Specifying the delimiter in the attribute list overrides
the inferred delimiter, but conflicting delimiters are bad style. Note that the
delimiter does not need to be produced for all output formats. Specifically,
HTML only supports using `.` for a list delimiter, so `)` is not supported in
HTML. And since EPUB is based on HTML, and since MOBI is typically produced from
EPUB, neither EPUB nor MOBI should be expected to support customizable
delimiters. However, PDF and LaTeX are not subject to these limitations, and
should support both `.` and `)` as list delimiters.

The use of these attributes are shown in the following examples.

### Lists with Attributes: Good Style

This list will be numbered a, b, c, and will have the delimiter of `.`:

```````````````````````````````` example
before

{type: a}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered a, b, c, and will have the delimiter of `.`:

```````````````````````````````` example
before

{type: a, delimiter: "."}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered a, b, c, and will have the delimiter of `)` in
output formats that support it (e.g. in PDF but not in HTML):

```````````````````````````````` example
before

{type: a}
1) foo
2) bar
3) baz

after
.
<p>before</p>
<ol type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered a, b, c, and will have the delimiter of `)` in
output formats that support it (e.g. in PDF but not in HTML):

```````````````````````````````` example
before

{type: a, delimiter: ")"}
1) foo
2) bar
3) baz

after
.
<p>before</p>
<ol type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered A, B, C:

```````````````````````````````` example
before

{type: A}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol type="A">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered c, d, e:

```````````````````````````````` example
before

{type: a}
3. foo
4. bar
5. baz

after
.
<p>before</p>
<ol type="a" start="3">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered i, ii, iii:

```````````````````````````````` example
before

{type: i}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol type="i">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered I, II, III:

```````````````````````````````` example
before

{type: I}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol type="i">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered iii, iv, v:

```````````````````````````````` example
before

{type: i}
3. foo
4. bar
5. baz

after
.
<p>before</p>
<ol type="i" start="3">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered 3, 2, 1:

```````````````````````````````` example
before

{reversed: true}
3. foo
2. bar
1. baz

after
.
<p>before</p>
<ol start="3" reversed="true">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered c, b, a:

```````````````````````````````` example
before

{type: a, reversed: true}
3. foo
2. bar
1. baz

after
.
<p>before</p>
<ol start="3" type="a" reversed="true">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered iii, ii, i:

```````````````````````````````` example
before

{type: i, reversed: true}
3. foo
2. bar
1. baz

after
.
<p>before</p>
<ol start="3" type="i" reversed="true">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

### Nested Lists with Attributes

Everything which has been said about attribute lists on lists applies to nested
lists as well. This example shows a nested list of the form 1, a, i, * (the
final nested list is an unordered list, not an ordered list):

```````````````````````````````` example
before

1. lorem
   {type: a}
   1. foo
      {type: i}
      1. apple
         * Gala
         * Spartan
         * McIntosh
      2. orange
      3. banana
   2. bar
   3. baz
2. ipsum
3. dolor

after
.
<p>before</p>
<ol>
<li>lorem
<ol type="a">
<li>foo
<ol type="i">
<li>apple
<ul>
<li>Gala</li>
<li>Spartan</li>
<li>McIntosh</li>
</ul>
</li>
<li>orange</li>
<li>banana</li>
</ol>
</li>
<li>bar</li>
<li>baz</li>
</ol>
</li>
<li>ipsum</li>
<li>dolor</li>
</ol>
<p>after</p>
````````````````````````````````

This nested list will be rendered somewhat like this:

~~~
before

1. lorem
   a. foo
        i. apple
           * Gala
           * Spartan
           * McIntosh
       ii. orange
      iii. banana
   b. bar
   c. baz
2. ipsum
3. dolor

after
~~~

### Lists with Attributes: Lazy Style

It is acceptable to just use the number of the first label, and rely on list
behaviour.

This list will be numbered 1, 2, 3:

```````````````````````````````` example
before

1. foo
1. bar
1. baz

after
.
<p>before</p>
<ol>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered 3, 4, 5:

```````````````````````````````` example
before

3. foo
3. bar
3. baz

after
.
<p>before</p>
<ol start="3">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered c, d, e:

```````````````````````````````` example
before

{type: a}
3. foo
3. bar
3. baz

after
.
<p>before</p>
<ol start="3" type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered iii, iv, v:

```````````````````````````````` example
before

{type: i}
3. foo
3. bar
3. baz

after
.
<p>before</p>
<ol start="3" type="i">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered 3, 2, 1:

```````````````````````````````` example
before

{reversed: true}
3. foo
3. bar
3. baz

after
.
<p>before</p>
<ol start="3" reversed="true">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

### Lists with Attributes: Redundant Style

This list will be numbered 1, 2, 3. This is just the default behaviour made
explicit:

```````````````````````````````` example
before

{type: 1, reversed: false}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

### Lists with Attributes: Bad Style

This list will be numbered a, b, c, and will have the delimiter of `.`.
The reason that this is bad style is that the specified delimiter and the
inferred delimiter do not match:

```````````````````````````````` example
before

{type: a, delimiter: "."}
1) foo
2) bar
3) baz

after
.
<p>before</p>
<ol type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered a, b, c, and will have the delimiter of `)` in
output formats that support it (e.g. in PDF but not in HTML). The reason
that this is bad style is that the specified delimiter and the inferred
delimiter do not match:

```````````````````````````````` example
before

{type: a, delimiter: ")"}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered 3, 2, 1, not 3, 4, 5. Only the first number matters
since the reversed attribute is set:

```````````````````````````````` example
before

{reversed: true}
3. foo
4. bar
5. baz

after
.
<p>before</p>
<ol reversed="true">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered 1, 0, -1, not 1, 2, 3. Only the first number matters
since the reversed attribute is set:

```````````````````````````````` example
before

{reversed: true}
1. foo
2. bar
3. baz

after
.
<p>before</p>
<ol reversed="true">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered c, d, e, regardless of the order of the numbers:

```````````````````````````````` example
before

{type: a}
3. foo
2. bar
1. baz

after
.
<p>before</p>
<ol start="3" type="a">
<li>three</li>
<li>bar</li>
<li>one</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered 1, 0, -1:

```````````````````````````````` example
before

{reversed: true}
1. foo
1. bar
1. baz

after
.
<p>before</p>
<ol reversed="true" start="1">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered i, 0, -1, since the Romans didn't have the concept of
zero or negative numbers (and thus neither do Roman numerals):

```````````````````````````````` example
before

{type: i, reversed: true}
1. foo
1. bar
1. baz

after
.
<p>before</p>
<ol reversed="true" start="1" type="i">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

This list will be numbered a, 0, -1, since there are no negative letters either:

```````````````````````````````` example
before

{type: a, reversed: true}
1. foo
1. bar
1. baz

after
.
<p>before</p>
<ol reversed="true" start="1" type="a">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
<p>after</p>
````````````````````````````````

</div>


<div class="extension">

## Definition lists (Markua extension)

Definition lists are also supported in Markua. To define a definition list, use
the following syntax:

```````````````````````````````` example
term 1
: definition 1

term 2
: definition 2
.
<dl>
  <dt>term 1</dt>
  <dd>definition 1</dd>

  <dt>term 1</dt>
  <dd>definition 1</dd>
</dl>
````````````````````````````````

The *term* portion of a definition list item may only contain simple inline
content such as text, code spans, images (which are not figures), etc. It may
not contain resources or arbitrary block content such as figures. The
*definition* portion of a definition list item may contain arbitrary block
content.

There can be one to three spaces after the colon, or one tab.

Note that in HTML the terms produce `<dt>` elements (for "description term")
and the definitions produce `<dd>` elements (for "description details"). Since
it is not certain that the definition list contains definitions, and since it
is desirable for the syntax to remain simple, the `<dd>` element does not
contain a `<dfn>` element.

There can only be one term per definition, but there can be multiple definitions
for a term:

```````````````````````````````` example
term 1
: definition 1a
: definition 1b

term 2
: definition 2
.
<dl>
  <dt>term 1</dt>
  <dd>definition 1a</dd>
  <dd>definition 1b</dd>

  <dt>term 2</dt>
  <dd>definition 2</dd>
</dl>
````````````````````````````````

A single term definition list is a definition list, regardless of how many
definitions for the term exist:

```````````````````````````````` example
term
: definition
.
<dl>
  <dt>term</dt>
  <dd>definition</dd>
</dl>
````````````````````````````````

Finally, each definition list item can contain newlines and multiple paragraphs.
What you do here is indent the subsequent lines by the same amount of space as
the initial line.

(If you do not indent the subsequent lines, then you're ending the definition
list and just starting a new paragraph.)

```````````````````````````````` example
before

one
: foo
: bar

  baz

two
: foo

after
.
<p>before</p>
<dl>
  <dt>one</dt>
  <dd>foo</dd>
  <dd>
    <p>bar</p>
    <p>baz</p>
  </dd>

  <dt>two</dt>
  <dd>foo</dd>
</dl>
<p>after</p>
````````````````````````````````

Note that single line breaks within the definitions (the `<dd>` not `<dt>`)
are handled the same way as single line breaks within paragraphs, and are
subject to the `soft-breaks` document setting which defaults to `source` for
compatibility with Markdown.

```````````````````````````````` example
before

one
: lorem
  ipsum

  dolor

  sit amet

two
: foo

after
.
<p>before</p>
<dl>
  <dt>one</dt>
  <dd>
    <p>lorem
    ipsum</p>
    <p>dolor</p>
    <p>sit amet</p>
  </dd>

  <dt>two</dt>
  <dd>foo</dd>
</dl>
<p>after</p>
````````````````````````````````

Finally, with definition lists, you need to link to a specific definition,
not just to the list itself. This is useful to do, since in a document with many
definitions, it's helpful if the reader scrolls to the right spot or opens to
the right page.

To do this, just define a span id on the element itself, and then link to it.

```````````````````````````````` example
foo{#foo}
: This is foo.

bar{#bar}
: This is bar.
.
<dl>
  <dt><span id="foo">foo</span></dt>
  <dd>This is foo.</dd>

  <dt><span id="bar">bar</span></dt>
  <dd>This is bar.</dd>
</dl>
````````````````````````````````

</div>


<div class="extension">

# Quizzes and exercises (Markua extension)

Markua was initially designed for the writing of books, but it has been extended
to support creating courses. For example, Leanpub authors can click a button to
create a massive open online course (MOOC), complete with automated marking,
entirely from a Markua document.

**To convert a Markua document from a book into a course, all you need to do is
add quizzes and exercises.**

Over the past decade, there has been a steady growth of interest in courses
delivered over the internet at massive scale. These Massive Open Online Courses,
or MOOCs, consist of essentially four things:

1. Reading material
2. Video or audio lectures
3. Exercises, with answers provided to the student
4. Quizzes, with answers used to automatically mark the quiz

It turns out the four things in this list all work perfectly in a Markua
document. So, not only can Markua be used to easily create a textbook which
includes video, audio, images and quizzes, it is also an amazingly simple and
flexible way of creating a MOOC. A MOOC is essentially just a textbook which is
executable, plus discussion forums and credentials. For example,
[Leanpub](https://leanpub.com) authors can click one button to create a massive
open online course (MOOC), complete with automated marking for all the quizzes
in the course, entirely from one Markua document.

Quizzes and exercises are essentially the same. The only difference is that
quizzes are intended to be marked, and exercises are not. Because of their
similarities, they are discussed here together.

Quizzes or exercises in a textbook consist of two things:

1. Questions, typically in the chapter itself.
2. Answers, typically at the back of the book.

The questions in the chapter essentially are placed there like any other block
element, such as an aside or blurb. The answers are positioned at the back of
the book, along with other elements like the index and appendices. The specific
location that they are positioned can be controlled by the author using insert
directives, discussed earlier.

There is only one syntax to create a quiz or exercise. For a quiz, it's by
wrapping the quiz in `{quiz}` ... `{/quiz}`; for an exercise, it's by wrapping
the exercise in `{exercise}` ... `{/exercise}`.

Here is a brief example of a quiz:

~~~
{quiz, id: quiz1}
? How many letters are in the word Markua?

a) 5
B) 6
c) 7

? How many unique letters are in the word Markua?

! 5
{/quiz}
~~~

This quiz contains two questions: a multiple-choice question where the correct
answer is b, and a fill-in-the-blank question where the correct answer is 5.
Quizzes and exercises have the same question types, discussed later.

With a quiz, the `id` attribute is **required**. This is so the identity of a
quiz can be preserved across generations of a course.

Here is the same example, but as an exercise:

~~~
{exercise, id: exercise1}
? How many letters are in the word Markua?

a) 5
B) 6
c) 7

? How many unique letters are in the word Markua?

! 5
{/exercise}
~~~

Just like with quiz, with an exercise the `id` attribute is **required**. This
is so the identity of an exercise can be preserved across generations of a
course.



A quiz or exercise can contain any Markua content, not just questions and
answers. This is true regardless of whether the quiz or exercise is in a MOOC,
an ebook or on paper. Note that video and audio resources don't work so well on
paper, however.

If a quiz or exercise starts with any type of heading immediately after the
`{quiz}` or `{exercise}` line, this heading's content should be considered the
name of the quiz or exercise. This can be used in a list of quizzes or exercises
produced by the Markua Processor. Typically the heading will be a chapter
heading (`# `), but section headings (`## `) and lower headings also are
supported. (The reason for this is that quizzes are sometimes top-level things,
and other times are nested inside chapters, sections or sub-sections. Some
course authors would correctly feel that the quiz should have the appropriate
level of heading given their position in the document.

Example:

~~~
{quiz, id: quiz2}
# Markua Quiz

Watch this [video](https://www.youtube.com/watch?time_continue=1&v=VOCYL-FNbr0)
of Peter explaining Markua.

? What year was that video from?

What year? Really? Did it really take that long? What was going on???

a) 2012
b) 2013
C) 2014
d) 2015

{words: 500}
? Why do you think the first version of the Markua spec took so long?

Look at the Leanpub [website](https://leanpub.com/).

! Answers could include "bootstrapped startup", the spec evolving, etc.

That's it for this quiz, and this MOOC!

**Thanks for taking my course!**
{/quiz}
~~~

There are four types of questions supported by Markua.

1. Multiple Choice
2. Multiple Selection
3. Fill In The Blank
4. Written

These types are not specified by a `{type}` attribute. Instead, they are
inferred from properties of the answers or from other attributes of the
question.

The exact way to create these types of questions is discussed further below.

## Quiz and exercise output

A Markua Processor has many degrees of freedom in terms of whether, and how,
to output quizzes and exercises. As such, no HTML mapping is shown here.

For example, when outputting an online course or MOOC, the Markua Processor
can basically do whatever it wants. It can choose to output an ebook of the
course material only, and put all quizzes and exercises only in the online
version. Or it can choose to put all the quizzes only in the online version,
and include the exercises in the ebook version as well. Or it can include the
quizzes and exercises in the ebook version, but only include the answers for
the exercises in the ebook version.

If, on the other hand, a Markua Processor is outputting a textbook, it may
choose to output the quizzes in an entirely separate ebook or print-ready PDF,
for use in physical classrooms.

If a Markua Processor does output a quiz or exercise, it needs to do so in a
medium-appropriate way. This includes outputting multiple-choice questions
without showing their answers, of course. The display of fill in the blank
and essay questions varies greatly based on whether the question is in an
online quiz or exercise, in an ebook or on paper.

Markua Processors are encouraged to be creative here.

However, there are some rules. If a given quiz or exercise is output by a
Markua Processor in an ebook or a physical book, the following things must
occur:

1. The quiz or exercise must be output as questions-only, in the place in the
   document where the quiz was defined.
2. The questions must be numbered sequentially, incrementing by 1 for each
   question.
3. The questions must be numbered starting from the number specified by the
   `start-at` attribute if specified, or 1 if no `start-at` attribute is
   specified.
4. The multiple choice options in any question must be converted into a set of
   choices which all look the same, so that the correct answer is not indicated.
   Converting all choice letters to lowercase is sufficient here.
5. The answers, if provided, must be positioned somewhere separate from the
   questions, typically at the back of the book. This position can be controlled
   by the author using insert directives, discussed earlier.

## Quiz and exercise validation

### An empty quiz or exercise is not an error

A quiz or exercise which contains no questions is not an error. Instead, a if a
Markua Processor encounters a quiz or exercise with no questions it must filter
the quiz or exercise from the output, optionally providing a warning to the
author.

This lets authors create placeholders for quizzes or exercises in their courses
before the quizzes or exercises are ready, which is potentially very useful in
an in-progress course.

### A malformed quiz or exercise is an error

If a Markua Processor encounters a malformed quiz or exercise it must treat this
as an error and not generate the output from the Markua document. Quizzes and
exercises are not something that should ever be produced in a broken state.

However, it is also an error to parse quiz syntax outside a quiz or exercise
block. A Markua Processor must not parse lines starting with ? or ! as
representing questions or answers unless those are contained in a quiz or
exercise block.

## Quiz and exercise attributes

These are the supported attributes on quizzes and/or exercises:

`attempts`
: The number of allowed attempts on a quiz. The default is defined by the value
of `default-quiz-attempts` on the containing course, or `1` if this is not
present. A value of `0` means the quiz cannot be taken (yet). A value of `-1`
means the quiz has an unlimited number of attempts. Since an exercise does not
count toward the mark on a course, an exercise always has an unlimited number
of attempts.

`auto-submit`
: `true` or `false`. The default is `true`. If true, an incomplete quiz is
submitted when the `time-limit` is expired. If false, it is not. Either way, an
incomplete quiz counts as an attempt.

`case-sensitive`
: `true` or `false`. The default is `true`. This sets the default behaviour of
fill in the blank questions. If `true`, the fill in the blank question answers
are case-sensitive. If false, they are not.

`id`
: All Markua elements support an `id` attribute. The reason the `id` attribute
is explicitly listed here is to emphasize that a Markua Processor may require
an `id` attribute on a quiz or exercise. For example, Leanpub requires the `id`
attribute on all quizzes, in order to determine the identity of quizzes when a
course is being published in-progress. (As a student, you'd be pretty unhappy
if you had to re-take an unchanged quiz simply because a professor published a
new course version.)

`mark-request-url`
: If omitted, all the quiz or exercise answers are defined in the Markua
document. If present, some or all of the quiz or exercise questions are
externally marked via an API defined at the URL specified in this attribute.
When the quiz or exercise is completed, the entire quiz or exercise should be
sent to the endpoint at the `mark-request-url`. Here's how this works in
Leanpub; other Markua Processors should presumably do something similar. When a
quiz or exercise with this attribute defined is completed, its state is set to
"pending". Leanpub then sends the quiz or exercise data as a JSON payload to the
marking endpoint. This JSON contains the following attributes:
`mark-response-url` (which defines where responses are sent), `quiz_id`,
`quiz_version`, `quiz_hash` (an SHA hash, for an automated quiz versioning
approach which does not rely on the course author updating a version attribute),
`quiz_results` (an array of question data structures containing the question,
the possible answers, the correct answer according to the Markua document, the
answer provided by the student, and (if the question is markable) the mark
determined automatically). The API endpoint should send results to the
`mark-response-url`. (Even though exercises are not worth points in a course,
they can be marked, for the benefit of the student. However, the expectation is
that this attribute will be used primarily by quizzes.) The `mark-response-url`
in the payload contains URL to respond to with the results of the marking the
quiz or exercise. The format of the expected payload should be defined by the
Markua Processor. For Leanpub this is a JSON payload containing the question ids
and the marks for each question. The mark is a decimal number of points between
0 and the maximum number of points for the question, inclusive. The decimal
supports two decimal places, so you can get 3.75 out of 4, for example. The
mark response must include marks for all questions that are unmarked. It may
also include marks for questions that Leanpub marked, and those will override
Leanpub’s marks. Finally, note that even though exercises are not worth points
in a course, they can be marked, for the benefit of the student. So, since
they can be marked, they can also be externally-marked via a
`mark-request-url`. However, the expectation is that this attribute will be
used primarily by quizzes.

`points`
: If present, this is the total number of points the quiz or exercise is worth.
(This really only matters for quizzes, but is supported for exercises as well,
in case a Markua Processor wishes to display the points on exercises to make
them feel more real.) If `points` is not present, the worth of the quiz is
determined by summing the points of the questions. (Questions are worth 1 point
each if they have no `points` attribute.) If the quiz has a `points` attribute
and its questions also have `points` attributes, the worth of each question in
a larger course context is determined as follows: its `points` are the
numerator, and the total `points` in the quiz or exercise is the denominator.

`random-choice-order`
: `true` or `false`. The default is `false`. This sets the default behaviour of
multiple choice questions. If `true`, the choices in the multiple choice
question are randomly arranged; if `false`, they are presented in the order
written.

`random-question-order`
: `true` or `false`. The default is `false`. This sets the default behaviour
of the quiz or exercise. If `true`, the questions are randomly arranged; if
`false`, they are presented in the order written.

`start-at`
: The `start-at` is the number of the first question. The default is 1. Any
integer is permitted. Subsequent questions will have a number which is 1 higher
than the previous question.

`show-answers`
: This can be `all`, `incorrect` or `none`. It affects how answers are shown
after a quiz or exercise is completed, say in a MOOC. For exercises, the
default value is determined by the value of the `default-exercise-show-answers`
document setting, with `all` being the default value of that attribute. For
quizzes, the default value is determined by the value of the
`default-quiz-show-answers` document setting, with `incorrect` being the default
value of that attribute. Document settings are discussed later.

`time-limit`
: The time limit to finish the quiz, once started. The format is `XdYhZm`. For
example, 3 days, 6 hours and 45 minutes is expressed as `3d6h45m`; 7 days is
expressed as `7d`. The default is `7d`.

`use-result`
: `best` or `latest`. Whether the best result on the quiz is used, or the latest
one. The default is the value of `default-quiz-use-result` on the course.

`version`
: The version of the quiz. This does not replace the function of the `id`; it's
more for use in analytics by the instructor. The default is `1`.

As discussed above, there is no `title` or `title` attribute for a quiz--you can
just add a heading inside the quiz or exercise itself, using the normal Markua
formatting for a chapter heading.

## Multiple choice questions

A multiple choice question has 2 or more answer choices, and 1 correct answer
choice.

The correct answer choice is in capital letters before the parentheses;
incorrect answer choices have lowercase letters before the parentheses.

Example:

~~~
? How many letters are in the word Markua?

a) 5
B) 6
c) 7
~~~

Obviously, when generating the question in the actual quiz or exercise, a
Markua Processor must make all answer choices have the same type of letter.
This is usually a lowercase letter, although either all lowercase or all
uppercase letters would be fine.

Unless a `choose-answers` attribute is used, the multiple choice answers all
must start from a or A, and must use a right-parenthesis after the a or A. Any
line starting with a) ar A) in a quiz is considered a set of multiple choice
quiz answers, not an ordered list using a) or A) as a delimiter. If you want to
put an ordered list in a quiz body, use periods for the delimiter.

A multiple choice question may also have a dynamic number of answer choices,
including for the correct answer. This done with the special `choose-answers`
attribute, shown and explained below.

~~~
{choose-answers: 4}
? How many grams are in a pound?

C) 454
C) 453
m) 451
m) 1000
o) 100
o) 150
o) 200
o) 250
o) 300
o) 500
~~~

The `choose-answers` attribute specifies how many answer choices should be
shown. This includes exactly one of the correct answers (indicated with `C`),
all of the mandatory incorrect answers (indicated with `m`) and as many of the
optional incorrect answers (indicated with `o`) as are needed for the question
to have the total number of answers as indicated by the `choose-answers`
attribute.

So, in the above example, either `453` or `454` will be shown, along with the
mandatory incorrect answer choices `451` (a literary joke) and `1000` (a
kilogram, not a pound) and one of the optional incorrect answers (`100`,
`150`, `200`, `250`, `300` or `500`).

When a `choose-answers` attribute is used, the question will always have
`random-choice-order`.

The following are errors in a question where a `choose-answers` attribute is
used:
- 0 correct (`C`) answers
- not enough mandatory (`m`) incorrect or optional (`o`) incorrect answers for
the question to have the `choose-answers` number of answers
- if `choose-answers` is n, a number of mandatory (`m`) incorrect answers >= n
(since there needs to be one correct answer shown)
- if `choose-answers` is n and the number of mandatory (`m`) answers is n - 1,
then any optional (`o`) incorrect answers existing
- answers starting with something other than `C`, `m` or `o`

### Supported attributes on multiple choice questions

`choose-answers`
: This is described above. If `choose-answers` is used, `random-choice-order`
is forced to true.

`points`
: The number of points the question is worth. This number can be 0 or higher.
The default is 1.

`random-choice-order`
: `true` or `false`. The default is `false`, unless `choose-answers` is used.
This sets the behaviour of the specific multiple choice question. If `true`,
the choices in the multiple choice question are randomly arranged; if `false`,
they are presented in the order written. If this attribute is omitted, its
value is determined by the `random-choice-order` attribute on the quiz itself,
which defaults to `false` if absent.

## Multiple selection questions

A multiple selection question has 2 or more answer choices, and 1 or more `true`
answer choices.

(Leanpub authors: This question type is not yet supported in Leanpub.)

The `true` answer choices are specified with `T`; `false` answer choices are
specified with `F`.

To get the question 100% correct, you must select **ALL** answers which are
`true` (not just one of them) and **NONE** of the answers which are `false`.
As discussed later, the `mark` attribute determines whether the marking is
all-or-nothing (with the `binary` value) or whether a partial credit can be
earned (with the `ratio`) value.

Regardless of the value of the `mark` attribute, to get any score for a
multiple selection question, at least one answer choice must be selected.
Leaving a multiple selection question blank always gets zero points, even if
the `mark` attribute is `ratio`. Otherwise, if a test had nothing but multiple
selection questions with `ratio`-marked questions, with half the answers `true`
and half the answers `false`, you could get 50% on the test by just handing it
in blank!

### Supported attributes on multiple selection questions

`mark`
: `binary` or `ratio`. The default is `binary`. This sets the marking behaviour
of the specific multiple selection question. If `binary`, the question is all
or nothing: you either get full points for the question, or a 0 on the question.
To get full points, you must select every `true` choice and none of the `false`
choices. If `ratio`, you get a fractional score defined as `(number of true
choices selected + number of false choices not selected) / (total number of
choices)`. This fraction is then multiplied by the `points` that the question
is worth to compute the `points` that you received on the question. Note that
regardless of whether the `mark` is `binary` or `ratio`, a question which is
left blank is always completely wrong, earning no credit for the
correctly-not-selected `false` choices.

`points`
: The number of points the question is worth. This number can be 0 or higher.
The default is 1. The `mark` attribute is used to determine how the points are
computed. Again, regardless of whether the `mark` is `binary` or `ratio`, a
question which is left blank always earns 0 points.

`random-choice-order`
: `true` or `false`. The default is `false`. This sets the behaviour of the
specific multiple selection question. If `true`, the choices in the multiple
choice question are randomly arranged; if `false`, they are presented in the
order written. If this attribute is omitted, its value is determined by the
`random-choice-order` attribute on the quiz itself, which defaults to `false`
if absent.

### Examples of multiple selection questions

~~~
? Which of these are animals?

F) apple
T) cow
F) lettuce

{mark: ratio, points: 2}
? Which of these are fruits?

T) apple
F) cow
F) lettuce
T) peach
T) pear
F) rice
~~~

Here the first question defaults to `binary` and 1 point; the second question
is `ratio` and 2 points.

To get the first question correct, you must select `cow`, and neither of
`apple` or `lettuce`.

To get this second question 100% correct, you must select all of `apple`,
`peach` and `pear`, and none of `cow`, `lettuce` or `rice`. For this question,
if the `mark` attribute had been `binary`, the only way to get any points for it
would be to select `apple`, `peach` and `pear`, and to leave `cow`, `lettuce`
and `rice` all unselected. However, the `mark` is not `binary`; it is `ratio`.
So, if you selected `apple`, `peach` and `rice`, then the score would be
computed as follows: ((2 correctly-selected true choices + 2
correctly-not-selected false choices) / 6 choices) * 2 points = (4/6) * 2
points = 1.5 points. Since at least one choice was selected, you get just as
much credit for correctly not selecting `cow` and `lettuce` as you do for
correctly selecting `apple` and `peach`. If an instructor thinks this is too
lenient, then `binary` is the choice for them!

## Fill in the blank questions

A fill in the blank question consists of a question and a set of answers. Each
answer is specified by `!`, an optional points value, a space, and then a
semicolon-separated list of the acceptable values of that answer. Each answer
value can be a text string (quoted or not) or a regular expression (regex).
If a points value is not specified for an answer, the answer is worth full
points.

Support for regular expression answer values is optional. However, a Markua
Processor which supports regular expression marking must interpret any answer
which starts with a forward slash (`/`) and ends with a forward slash followed
by some word characters (e.g. `i`) as being a regular expression. Note that the
particular format of the regular expression used is implementation-specific.
For example, Leanpub uses Ruby regular expressions. Other Markua Processors
could, for example, use Perl or JavaScript regular expressions.

Finally, note that you can separate regular expressions with semicolons, just
like any other answer value. There's no reason not to support this, and it may
lead to simpler regular expressions. However, if you're good at regular
expressions, you can also combine them into one regular expression, of course.

Note that since a semicolon is used to separate answer values, to provide an
actual semicolon as part of an answer value you must either put the answer
value in quotes, use a backslash-escape `\;` or make the semicolon part of a
regular expression.

Examples:

~~~
? How many unique letters are in the word Markua?

! 5

? What's the global capital of investment banking?

! New York ; London

? What's the global capital of investment banking?

! "New York" ; "London"

? What's the global capital of investment banking?

! New York
! London

? What's the global capital of investment banking?

! "New York"
! "London"

{case-sensitive: false}
? What's pi?

! "The ratio of a circle's circumference to its diameter" ; 3.14 ... 3.1416 ;
an irrational number

{case-sensitive: false}
? What's pi?

! "The ratio of a circle's circumference to its diameter"
! 3.14 ... 3.1416
! an irrational number

? Where's the Eiffel Tower?

! /(Paris|France)/i

? Where's the Eiffel Tower?

! /Paris/i ; /France/i

{points: 2}
? Where's the Eiffel Tower?

! /Paris/i
! /France/i

{points: 2}
? Where's the Eiffel Tower?

!2 /Paris/
!1 /paris/i
!.5 /France/i

{points: 2}
? Where's the Eiffel Tower?

! /Paris/
!1 /paris/i
!.5 /France/i

{points: 2}
? Where's the global capital of investment banking?

!2 New York ; London
!1 USA ; UK
~~~

As shown by the answer (`"The ratio of a circle's circumference to its diameter"
; 3.14 ... 3.1416; an irrational number`), acceptable answer values in a fill
in the blank question can be of completely different types, and numeric answer
values can be expressed as ranges (min <= x <= max), expressed as `min ... max`.
Also, this answer shows that quotes are optional around text strings. The reason
to use quotes is for clarity, or to ensure that any semicolons used are treated
as semicolons instead of as answer choice delimiters. Semicolons inside quotes
are just semicolons and do not need to be backslash-escaped. You do, however,
need to backslash-escape a quote if you want it to be treated as a literal
quote, instead of the start or end of a string.

If there are multiple answers to a fill in the blank question and an answer key
is being output by the Markua Processor for use by human markers, the acceptable
values should be clearly distinguished from each other. The recommendation is to
use an unordered list of acceptable values, one per line, but there are no
requirements here.

If you're a programmer, you may wonder what number types and formats are
supported. Are they integers? Floating point numbers? Can you use scientific
notation? And how are the numbers formatted? Are they US or Canadian numbers
(`123,456.78`) or EU numbers (`123 456,78`)?  What if there's a number that
means something different in the US and EU--does `123,456` mean `123456` or
`123.456`?

These questions are made worse by the fact that Markua can be used to create
human-marked paper quizzes as well as automatically-marked MOOCs. So,
specifying rules which made the syntax unambiguous for MOOCs would mean that
the answers for human-marked paper quizzes could not be specified with a
tolerable amount of ambiguity. So, the format of the answer values in a fill
in the blank question is out of scope of the Markua Spec.

### Supported attributes on fill in the blank questions

`points`
: The number of points the question is worth. This number can be 0 or higher.
The default is the 1. The answers must either not specify points (in which case
they are worth the full value of points that the question is worth), or they
must specify points between 0 and the `points` value.

`case-sensitive`
: `true` or `false`. The default is `true`. This sets the behaviour of the
specific fill in the blank question. If `true`, the fill in the blank question
answer is case-sensitive. If false, it is not. In the case of multiple
acceptable answer values, this attribute applies to all of them. Note that this
only applies to text string answers, not to regular expressions. For a regular
expression to be case-insensitive, you must end it with an `i` after the
closing backtick.

## Written questions

A written question corresponds to short answer, long answer or essay questions
in traditional tests. It looks the same as a fill in the blank question, except
the answer is optional.

A question is interpreted as a written question if either the `words`, `lines`
or `pages` attribute is specified, if there is no answer provided, or if an
answer is provided using the `{answer}` syntax discussed shortly.

Note that an answer may be provided in a written question. If this is done, the
answer is not split into answer choices and values like a fill in the blank
answer. Instead, the answer is essentially a "note to markers", whether those
markers are underpaid graduate students or unpaid AIs. Markua does not specify
any microformat for this note to markers: it is just Markua text, kind of like
a blockquote (but with each line starting with `!` not `>`).

A Markua Processor generating a MOOC may handle written questions at its own
discretion, including not including them or giving them a `points` value of 0.

Examples:

~~~
{quiz, id: "quiz3"}

{pages: 2, points: 10}
? Why is 2019 like *1984*?

! If the student mentions Newspeak, give them an extra mark.

{words: 100, points: 2}
? Why is doubleplusungood the worst?

{lines: 10}
? Can you have multiple line answers in a written question?

! You bet you can!
!
! You can separate them with blank lines,
! and without blank lines.
!
! This is like a blockquote, which uses `>` characters.
~~~

Since a written question can have long answers, this increases the likelihood
that typing these answers after a bunch of `! ` delimiters will be a pain. So,
written questions (and **only** written questions) also support answers in the
form of `{answer} ... {/answer}`, like this:

~~~
{quiz, points: 0, id: "quiz3"}

{lines: 10}
? Write a function in Ruby that takes an argument and returns three times that
argument.

{answer}
The most straightforward way to do this is like this, since the last value
evaluated in the function is returned:

```ruby
def triple(y)
  y*3
end
```

However, you can also explicitly say `return` if you like:

```ruby
def triple(y)
  return y*3
end
```
{/answer}
{/quiz}
~~~

### Supported attributes on written questions

Note that only one of `words`, `lines` or `pages` may be provided. Providing
more than one is an error. Providing none of them means that the question is a
fill in the blank question, not a written question.

`points`
: The number of points the question is worth. This number can be 0 or higher.
The default is 1. A Markua Processor generating a MOOC may override this. For
example, when generating a MOOC, Leanpub overrides all written questions to
have a points attribute of 0, regardless of what (if anything) is specified for
this attribute by the author.

`words`
: The maximum number of words the answer can be. Obviously this is more useful
for online quizzes than paper ones.

`lines`
: The maximum number of lines the answer can be. Obviously this is more useful
for paper quizzes than online ones. On paper, this is most useful for a short
or long answer question.

`pages`
: The maximum number of pages the answer can be. Obviously this is more useful
for paper quizzes than online ones. On paper, this is most useful for an essay
question.

## Hints on questions

Any question can contain a hint, regardless of question type or whether an
answer is provided.

The hint starts on a line with a percent sign (`%`) followed by a single space.
It must follow the question, but it can come either before or after the answer
choices.

Hints can span multiple lines, if each line starts with a `%` sign. This is
similar to Markdown handles block quotes with `>`.

The hint can be used by a Markua processor to show to students at appropriate
times, such as when they get the answer wrong or leave it blank. The exact
specifics are implementation-dependent. Hint support is optional in a Markua
Processor. However, if it's not supported, it must be ignored.

~~~
? What's 1 + 2?

% In a multiple choice question, if you're not sure, `c` is usually a good guess.

a) 1
b) 2
C) 3
d) 4

? Explain the meaning of *The Myth of Sisyphus*.

% Not the actual myth, the essay by Camus.
%
% For bonus points, speculate about Camus' life, death, and what he would have
% thought about autonomous cars.

? Where's the Eiffel Tower?

! /(Paris|France)/i

% The answer must contain the city and/or country.
~~~

The hint can be a useful feature for a Markua Processor. There is a lot of
discretion here for Markua Processors to compete on features.

For example, here's how Leanpub handles hints:

1. We will show the hint as a popup next to the question in the web and mobile
   quiz views.
2. We will track if the student looked at the hint.
3. We will not subtract points for looking at hints for Leanpub-marked questions.
4. Whether the hint was used will be provided in the analytics, such as a CSV
   download that we make available to professors.
5. We will also output the hints for exercises in the "material book" for a
   course, in a section near the end of the book. This will be linked to via
   crosslinks from each exercise.
6. The answers page for a quiz or exercise will show the question, hint and
   answers for each question.

## Question alternates

The fact that a Markua document can be used to create an online course or MOOC
means that certain aspects of the syntax for quizzes and exercises are more
robust than they would otherwise. One example of this is question alternates.

In an online course or MOOC, some professors might not want every question the
same, despite the fact that question order and answer order can be randomized.
So, Markua supports question alternates, using a simple (if slightly ugly)
syntax. Question alternates are only supported in quizzes, since they make no
sense to include in exercises.

To create question alternates, every question in the quiz (not just those with
alternates) must be numbered sequentially, starting from 1, using a `?#` syntax.
This is a question mark followed by the number of the question, e.g.
`?1, ?2, ?3`. The questions in a quiz are numbered using sequential positive
integers starting from 1: 1, 2, 3, etc.

The alternates are specified by providing the same number for multiple
questions, e.g. `?1, ?1, ?1, ?2, ?3, ?4, ?4, ?5`. When the actual quiz is given,
only one of the questions for the given question number is used.

Note that only the first question with a given number may have a `points`
attribute--since all other alternates must use the same points value, specifying
it would be pointless.

The following is an example of a quiz which uses question alternates. This
ensures that to ensure that students get randomly selected versions of
questions 1 and 4. Also, since `random-question-order: true` is used, the actual
position of the questions is randomized after the specific questions are
selected from the alternates.

~~~
{quiz, id: "midterm", random-question-order: true}
?1 What's 2 + 2?

! 4

?1 What's 2.2 + 2.2?

! 4.4

?2 what's 3 + 3?

! 6

?3 What's 4 + 4?

! 8

{points: 2}
?4 What's 5 + 5?

! 10

?4 What's 6 + 6?

! 12

?5 What's 7 + 7?

! 14
{/quiz}
~~~

Note that the syntax for question alternates is very strict. Every question
must have a number, and these numbers must be in ascending order (except for
the alternates, which have the same number as each other).

Question alternates can also be grouped by a `choose-questions` attribute
attached to the first question alternate. In this case, the Markua Processor
must choose the number of questions `m` specified from the given alternates
with that number `n`, or `n choose m`. Note that in this scenario, the numbering
after the alternates increases by `m`: for example, if a quiz starts with a
`choose: 3`, the next question is numbered 4, not 2. This ensures that the
person constructing the quiz knows what they are doing, and saves them from
having to keep track in a scenario where there are multiple questions with a
`choose-questions` attribute.

~~~
{quiz, id: "midterm", random-question-order: true}

{choose-questions: 3}
?1 What's 2 + 2?

! 4

?1 What's 2.2 + 2.2?

! 4.4

?1 what's 3 + 3?

! 6

?1 What's 4 + 4?

! 8

?1 What's 5 + 5?

! 10

{points: 2}
?4 What's 6 + 6?

! 12

?5 What's 7 + 7?

! 14
{/quiz}
~~~

A Markua Processor must treat any error in the numbering of question
alternates (and the questions which follow) as an error, and not generate the
quiz if there is any error. This is preferable to a Markua Processor of trying
to guess at what the author meant, and trying to do the right thing. Fixing a
syntax error takes a couple minutes of editing and a few minutes to publish the
book or course again. However, fixing the consequences of a quiz being
administered to hundreds--or thousands, or tens of thousands--of people with an
incorrect number of questions, or with questions incorrectly used as alternates
for each other, would be much more difficult.

</div>


<!-- END TESTS -->



# Appendix: A parsing strategy

In this appendix we describe some features of the parsing strategy
used in the CommonMark reference implementations.

## Overview

Parsing has two phases:

1. In the first phase, lines of input are consumed and the block
structure of the document---its division into paragraphs, block quotes,
list items, and so on---is constructed.  Text is assigned to these
blocks but not parsed. Link reference definitions are parsed and a
map of links is constructed.

2. In the second phase, the raw text contents of paragraphs and headings
are parsed into sequences of Markdown inline elements (strings,
code spans, links, emphasis, and so on), using the map of link
references constructed in phase 1.

At each point in processing, the document is represented as a tree of
**blocks**.  The root of the tree is a `document` block.  The `document`
may have any number of other blocks as **children**.  These children
may, in turn, have other blocks as children.  The last child of a block
is normally considered **open**, meaning that subsequent lines of input
can alter its contents.  (Blocks that are not open are **closed**.)
Here, for example, is a possible document tree, with the open blocks
marked by arrows:

``` tree
-> document
  -> block_quote
       paragraph
         "Lorem ipsum dolor\nsit amet."
    -> list (type=bullet tight=true bullet_char=-)
         list_item
           paragraph
             "Qui *quodsi iracundia*"
      -> list_item
        -> paragraph
             "aliquando id"
```

## Phase 1: block structure

Each line that is processed has an effect on this tree.  The line is
analyzed and, depending on its contents, the document may be altered
in one or more of the following ways:

1. One or more open blocks may be closed.
2. One or more new blocks may be created as children of the
   last open block.
3. Text may be added to the last (deepest) open block remaining
   on the tree.

Once a line has been incorporated into the tree in this way,
it can be discarded, so input can be read in a stream.

For each line, we follow this procedure:

1. First we iterate through the open blocks, starting with the
root document, and descending through last children down to the last
open block.  Each block imposes a condition that the line must satisfy
if the block is to remain open.  For example, a block quote requires a
`>` character.  A paragraph requires a non-blank line.
In this phase we may match all or just some of the open
blocks.  But we cannot close unmatched blocks yet, because we may have a
[lazy continuation line].

2.  Next, after consuming the continuation markers for existing
blocks, we look for new block starts (e.g. `>` for a block quote).
If we encounter a new block start, we close any blocks unmatched
in step 1 before creating the new block as a child of the last
matched container block.

3.  Finally, we look at the remainder of the line (after block
markers like `>`, list markers, and indentation have been consumed).
This is text that can be incorporated into the last open
block (a paragraph, code block, heading, or raw HTML).

Setext headings are formed when we see a line of a paragraph
that is a [setext heading underline].

Reference link definitions are detected when a paragraph is closed;
the accumulated text lines are parsed to see if they begin with
one or more reference link definitions.  Any remainder becomes a
normal paragraph.

We can see how this works by considering how the tree above is
generated by four lines of Markdown:

``` markdown
> Lorem ipsum dolor
sit amet.
> - Qui *quodsi iracundia*
> - aliquando id
```

At the outset, our document model is just

``` tree
-> document
```

The first line of our text,

``` markdown
> Lorem ipsum dolor
```

causes a `block_quote` block to be created as a child of our
open `document` block, and a `paragraph` block as a child of
the `block_quote`.  Then the text is added to the last open
block, the `paragraph`:

``` tree
-> document
  -> block_quote
    -> paragraph
         "Lorem ipsum dolor"
```

The next line,

``` markdown
sit amet.
```

is a "lazy continuation" of the open `paragraph`, so it gets added
to the paragraph's text:

``` tree
-> document
  -> block_quote
    -> paragraph
         "Lorem ipsum dolor\nsit amet."
```

The third line,

``` markdown
> - Qui *quodsi iracundia*
```

causes the `paragraph` block to be closed, and a new `list` block
opened as a child of the `block_quote`.  A `list_item` is also
added as a child of the `list`, and a `paragraph` as a child of
the `list_item`.  The text is then added to the new `paragraph`:

``` tree
-> document
  -> block_quote
       paragraph
         "Lorem ipsum dolor\nsit amet."
    -> list (type=bullet tight=true bullet_char=-)
      -> list_item
        -> paragraph
             "Qui *quodsi iracundia*"
```

The fourth line,

``` markdown
> - aliquando id
```

causes the `list_item` (and its child the `paragraph`) to be closed,
and a new `list_item` opened up as child of the `list`.  A `paragraph`
is added as a child of the new `list_item`, to contain the text.
We thus obtain the final tree:

``` tree
-> document
  -> block_quote
       paragraph
         "Lorem ipsum dolor\nsit amet."
    -> list (type=bullet tight=true bullet_char=-)
         list_item
           paragraph
             "Qui *quodsi iracundia*"
      -> list_item
        -> paragraph
             "aliquando id"
```

## Phase 2: inline structure

Once all of the input has been parsed, all open blocks are closed.

We then "walk the tree," visiting every node, and parse raw
string contents of paragraphs and headings as inlines.  At this
point we have seen all the link reference definitions, so we can
resolve reference links as we go.

``` tree
document
  block_quote
    paragraph
      str "Lorem ipsum dolor"
      softbreak
      str "sit amet."
    list (type=bullet tight=true bullet_char=-)
      list_item
        paragraph
          str "Qui "
          emph
            str "quodsi iracundia"
      list_item
        paragraph
          str "aliquando id"
```

Notice how the [line ending] in the first paragraph has
been parsed as a `softbreak`, and the asterisks in the first list item
have become an `emph`.

### An algorithm for parsing nested emphasis and links

By far the trickiest part of inline parsing is handling emphasis,
strong emphasis, links, and images.  This is done using the following
algorithm.

When we're parsing inlines and we hit either

- a run of `*` or `_` characters, or
- a `[` or `![`

we insert a text node with these symbols as its literal content, and we
add a pointer to this text node to the [delimiter stack](@).

The [delimiter stack] is a doubly linked list.  Each
element contains a pointer to a text node, plus information about

- the type of delimiter (`[`, `![`, `*`, `_`)
- the number of delimiters,
- whether the delimiter is "active" (all are active to start), and
- whether the delimiter is a potential opener, a potential closer,
  or both (which depends on what sort of characters precede
  and follow the delimiters).

When we hit a `]` character, we call the *look for link or image*
procedure (see below).

When we hit the end of the input, we call the *process emphasis*
procedure (see below), with `stack_bottom` = NULL.

#### *look for link or image*

Starting at the top of the delimiter stack, we look backwards
through the stack for an opening `[` or `![` delimiter.

- If we don't find one, we return a literal text node `]`.

- If we do find one, but it's not *active*, we remove the inactive
  delimiter from the stack, and return a literal text node `]`.

- If we find one and it's active, then we parse ahead to see if
  we have an inline link/image, reference link/image, compact reference
  link/image, or shortcut reference link/image.

  + If we don't, then we remove the opening delimiter from the
    delimiter stack and return a literal text node `]`.

  + If we do, then

    * We return a link or image node whose children are the inlines
      after the text node pointed to by the opening delimiter.

    * We run *process emphasis* on these inlines, with the `[` opener
      as `stack_bottom`.

    * We remove the opening delimiter.

    * If we have a link (and not an image), we also set all
      `[` delimiters before the opening delimiter to *inactive*.  (This
      will prevent us from getting links within links.)

#### *process emphasis*

Parameter `stack_bottom` sets a lower bound to how far we
descend in the [delimiter stack].  If it is NULL, we can
go all the way to the bottom.  Otherwise, we stop before
visiting `stack_bottom`.

Let `current_position` point to the element on the [delimiter stack]
just above `stack_bottom` (or the first element if `stack_bottom`
is NULL).

We keep track of the `openers_bottom` for each delimiter
type (`*`, `_`), indexed to the length of the closing delimiter run
(modulo 3) and to whether the closing delimiter can also be an
opener.  Initialize this to `stack_bottom`.

Then we repeat the following until we run out of potential
closers:

- Move `current_position` forward in the delimiter stack (if needed)
  until we find the first potential closer with delimiter `*` or `_`.
  (This will be the potential closer closest
  to the beginning of the input -- the first one in parse order.)

- Now, look back in the stack (staying above `stack_bottom` and
  the `openers_bottom` for this delimiter type) for the
  first matching potential opener ("matching" means same delimiter).

- If one is found:

  + Figure out whether we have emphasis or strong emphasis:
    if both closer and opener spans have length >= 2, we have
    strong, otherwise regular.

  + Insert an emph or strong emph node accordingly, after
    the text node corresponding to the opener.

  + Remove any delimiters between the opener and closer from
    the delimiter stack.

  + Remove 1 (for regular emph) or 2 (for strong emph) delimiters
    from the opening and closing text nodes.  If they become empty
    as a result, remove them and remove the corresponding element
    of the delimiter stack.  If the closing node is removed, reset
    `current_position` to the next element in the stack.

- If none is found:

  + Set `openers_bottom` to the element before `current_position`.
    (We know that there are no openers for this kind of closer up to and
    including this point, so this puts a lower bound on future searches.)

  + If the closer at `current_position` is not a potential opener,
    remove it from the delimiter stack (since we know it can't
    be a closer either).

  + Advance `current_position` to the next element in the stack.

After we're done, we remove all delimiters above `stack_bottom` from the
delimiter stack.

# TODO

type: a, i, I, 1, etc for lists conflicts with type:

nested Markua resources

{type: markua, class: poem, title: "Nothing Like The Sun", whitespace: verbatim}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by *heaven*, I think my love as rare
    As any she belied with **false compare**.

![](person.jpg)

I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```

Tables:
row-start, row-end, col-start, col-end, cols: 4,6,7,12, rows: 13..18,22


~~~
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
~~~




```text




Defaults:

~~~text
foo
~~~

```guess
foo
```

Special Formats after ~~~ or ```

table
list
markua

Other

{}
~~~

Syntactic sugar following ```:

```
$ - latexmath
@ - asciimath
! - svg

```




THIS MUST BE SUPPORTED:

insertion method span:

foo bar ![](foo.png){title: "Peter Was Wrong"} baz

[Mar 31: YES]


equivalent to insertion method figure:

foo bar
{title: "Peter Was Wrong"}
![](foo.png)
baz

[Mar 31: YES]

equivalent to insertion method figure:

foo bar

{title: "Peter Was Wrong"}
![](foo.png)

{class: continued-para}
baz

[Mar 31: YES]

equivalent to insertion method figure:

foo bar

{title: "Peter Was Wrong"}
![](foo.png)

^
baz

[Mar 31: YES]


IF you have a title:, you CANNOT have a `class` of `span`.

[Mar 31: YES]

THIS MUST BE SUPPORTED:

insertion method span:

foo bar ![](foo.png){class: span} baz


insertion method span:

foo bar ![](foo.png) baz


insertion method span (inside a new para):

foo bar

![](foo.png)

baz

insertion method span (inside a new para):

foo bar `puts hello`{lang: ruby} baz

foo bar next is a code resource with class of listing

{class: listing}
```ruby
puts hello
```

{class: lithograph}
![](foo.png)

baz

{class: figure}
![](foo.png)

baz

{title: "Something with a title has a class of 'figure' unless specified"}
![](foo.png)

baz


What's the `class`?

if there is a title
  if the class was set to `span`
    remove `span` class, set it to `figure`, produce warning
  elsif the class was explicitly set to anything else
    that's the class
  else # no class set
    class is `figure`
  end
else # no title
  if the class was set to `span`
    it's span
  elsif the class was explicitly set to anything else
    that's the class
  else # no class set
    it is `span`
  end
end

What do we do with figure numbering?

Spec - have a global setting called figure-number-format: sequential | chapter (default sequential):

n

Figure 1, Figure 2, Figure 3, ...

OR

chapter_num.n

Figure 1.1, Figure 1.2, Figure 4.1, Figure 5.1, Figure 5.2, ...

SO:

1. Group by class, capitalized.
2. Number respecting figure-number-format: sequential | chapter

RESULT:

for class `listing`:

Listing 1, Listing 2, Listing 3, ...
Listing 3.1, Listing 3.2, Listing 4.1, ...

In a document:

List of Listings (`class: listing`)
...

List of Figures (`class: figure` [or implicit])
...

List of Equations (`class: equation`)
...

etc.

[Mar 31: YES]






foo bar ![](baz.png){title: "Here's a Baz"} baz lorem ipsum 

either:
a) we ignore the title because images inserted in a span context cannot be figures and thus cannot have captions
b) we respect the title because clearly the author wants one, so then we make a figure but what we do about spacing is up to the Markua Processor but it looks like this probably:

foo bar
(BAZ PICTURE)
Here's a Baz
baz lorem ipsum

Since there is a figure caption, it IS a figure, and thus we
add newlines where needed.

I was saying (a). I am now saying (b).

We could possibly add a warning, indicating that we added single newlines.

foo bar ![](baz.png){title: "Here's a Baz"} baz lorem ipsum 
== BECOMES ==>
foo bar
![](baz.png){title: "Here's a Baz"}
baz lorem ipsum 


because we're now going with (b), "Insertion Method: Figure and Span" is no longer needed.


DECISION:
Resources vary in four different ways.
1. Type: audio, code, image, iframe, markua, math, and video
2. Format: mp3, ruby, png, latexmath, mp4, etc.
3. Class: span, figure, equation, listing, table, etc.
4. Location: Inline, Local, and Web


Class is JUST about the list(s) of figures at the beginning of
a document, nothing more.

e.g. zoo animals by mammal / bird or cute / scary



# h1

## h2

para

para

para

para *italics text* stuff `puts "foo"`{lang: ruby} stuff **bold** stuff

baz

this is sad ![](tears-of-joy.png) really

baz

insertion method span (inside a new para):

foo bar

![](foo.png)

baz




THESE ARE THE TYPES:

Types:

`table` (format: markua, csv)
`list` (format: markua)






#########
MAR 31:

CHOICES: (the below would have relevant syntactic sugar)
a) type `poetry` with whitespace always verbatim and limited Markua formatting and monospaced font optional
b) type `poetry` with whitespace either verbatim or semantic and limited Markua formatting and monospaced font optional
c) type `markua` with class `poem` or anything with whitespace either `verbatim` or `semantic` and all Markua formatting and monospaced font optional
d) no whitespace verbatim, no poetry resources, etc.
e) rm poetry resource, be able to stick a class of poetry on a fenced markua block [literally c]
f) ```poem which is syntactic sugar for (c) or (a)

NO `raw` Markua resource format (which is equivalent to just typing it) because it is not "a thing in the book"...

{type: poetry, title: "Nothing Like The Sun"}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by *heaven*, I       think            my love as rare
    As any she belied with **false compare**.

I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```


```verbatim
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
  And yet, by *heaven*, I       think            my love as rare
  As any she belied with **false compare**.
```   

BEST ANSWER: no `markua` resource, but yes to a limited `poetry` resource????

MAR 31: YES (as `verbatim` resource.). prevent slippery slope of expanded scope


CB:
1. Are there other formats beside code and poetry that need whitespace verbatim?

`verbatim` resource type.
What `verbatim` means is...
1. whitespace is preserved verbatim
2. no automatic indenting is done
3. basic Markua text formatting (bold, italic, etc.) is done
4. Markua resources (e.g. tables, images, lists) CANNOT be nested in it.
5. can add {monospaced: true | false} (default false)
6. can be local, web, inline resource
7. {type: verbatim, class: normal_rules_apply}




{type: markua, class: poem, title: "Nothing Like The Sun", whitespace: verbatim}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by *heaven*, I       think            my love as rare
    As any she belied with **false compare**.

![](person.jpg)

I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```


#########







{type: markua, class: poem, title: "Nothing Like The Sun", whitespace: verbatim}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by *heaven*, I think my love as rare
    As any she belied with **false compare**.
```


^ needs sugar



sugar list:

```@
aoeu
```


Syntactic sugar following ```:

```
$ - latexmath
@ - asciimath
! - svg
(three tildes => ```text)
(three backticks => ```guess)
& - {type: markua, whitespace: verbatim}
```



[A]

{type: markua, whitespace: verbatim, monospace: false}
{type: markua, class: poem, whitespace: verbatim, monospace: false}
```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by *heaven*, I think my love as rare
    As any she belied with **false compare**.
```

```&
aoeu
```


